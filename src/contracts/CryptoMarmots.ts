//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    return new Promise((resolve, reject) => {
        client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); });
    });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module ClockAuction {
    export function Deploy<Tx>(client: Provider<Tx>, _nftAddress: string, _cut: number): Promise<string> {
        let bytecode = "608060405260008060146101000a81548160ff02191690831515021790555034801561002a57600080fd5b506040516117ea3803806117ea8339818101604052604081101561004d57600080fd5b810190808051906020019092919080519060200190929190505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506127108111156100b757600080fd5b8060028190555060008290508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a7639a20483d60e01b6040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b15801561015957600080fd5b505afa15801561016d573d6000803e3d6000fd5b505050506040513d602081101561018357600080fd5b810190808051906020019092919050505061019d57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050506115fa806101f06000396000f3fe6080604052600436106100dd5760003560e01c80638456cb591161007f57806396b5a7551161005957806396b5a75514610381578063c55d0f56146103bc578063dd1b7a0f1461040b578063f2fde38b14610462576100dd565b80638456cb59146102c0578063878eb368146102ef5780638da5cb5b1461032a576100dd565b80635c975abb116100bb5780635c975abb146101b85780635fd8c710146101e757806378bd7935146101fe57806383b5ff8b14610295576100dd565b806327ebe40a146100e25780633f4ba83a1461015b578063454a2ab31461018a575b600080fd5b3480156100ee57600080fd5b50610159600480360360a081101561010557600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104b3565b005b34801561016757600080fd5b506101706105cd565b604051808215151515815260200191505060405180910390f35b6101b6600480360360208110156101a057600080fd5b810190808035906020019092919050505061068e565b005b3480156101c457600080fd5b506101cd6106c0565b604051808215151515815260200191505060405180910390f35b3480156101f357600080fd5b506101fc6106d3565b005b34801561020a57600080fd5b506102376004803603602081101561022157600080fd5b81019080803590602001909291905050506107ea565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b3480156102a157600080fd5b506102aa61090e565b6040518082815260200191505060405180910390f35b3480156102cc57600080fd5b506102d5610914565b604051808215151515815260200191505060405180910390f35b3480156102fb57600080fd5b506103286004803603602081101561031257600080fd5b81019080803590602001909291905050506109d7565b005b34801561033657600080fd5b5061033f610aa4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561038d57600080fd5b506103ba600480360360208110156103a457600080fd5b8101908080359060200190929190505050610ac9565b005b3480156103c857600080fd5b506103f5600480360360208110156103df57600080fd5b8101908080359060200190929190505050610b62565b6040518082815260200191505060405180910390f35b34801561041757600080fd5b50610420610b9d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046e57600080fd5b506104b16004803603602081101561048557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610bc3565b005b600060149054906101000a900460ff16156104cd57600080fd5b836fffffffffffffffffffffffffffffffff1684146104eb57600080fd5b826fffffffffffffffffffffffffffffffff16831461050957600080fd5b8167ffffffffffffffff16821461051f57600080fd5b6105293386610c94565b61053257600080fd5b61053c3386610d7a565b610544611548565b6040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681526020014267ffffffffffffffff1681525090506105c58682610e73565b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062857600080fd5b600060149054906101000a900460ff1661064157600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a16001905090565b600060149054906101000a900460ff16156106a857600080fd5b6106b28134611056565b506106bd3382611201565b50565b600060149054906101000a900460ff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061078057508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61078957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156107e6573d6000803e3d6000fd5b5050565b600080600080600080600360008881526020019081526020016000209050610811816112c6565b61081a57600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a90046fffffffffffffffffffffffffffffffff168260010160109054906101000a90046fffffffffffffffffffffffffffffffff168360020160009054906101000a900467ffffffffffffffff168460020160089054906101000a900467ffffffffffffffff16849450836fffffffffffffffffffffffffffffffff169350826fffffffffffffffffffffffffffffffff1692508167ffffffffffffffff1691508067ffffffffffffffff169050955095509550955095505091939590929450565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461096f57600080fd5b600060149054906101000a900460ff161561098957600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a16001905090565b600060149054906101000a900460ff166109f057600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a4957600080fd5b6000600360008381526020019081526020016000209050610a69816112c6565b610a7257600080fd5b610aa0828260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166112f4565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008381526020019081526020016000209050610ae9816112c6565b610af257600080fd5b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b5357600080fd5b610b5d83826112f4565b505050565b600080600360008481526020019081526020016000209050610b83816112c6565b610b8c57600080fd5b610b9581611342565b915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c1c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c9157806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008273ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610d2057600080fd5b505afa158015610d34573d6000803e3d6000fd5b505050506040513d6020811015610d4a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610e5757600080fd5b505af1158015610e6b573d6000803e3d6000fd5b505050505050565b603c816060015167ffffffffffffffff161015610e8f57600080fd5b806003600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050507fa9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba78282602001516fffffffffffffffffffffffffffffffff1683604001516fffffffffffffffffffffffffffffffff16846060015167ffffffffffffffff166040518085815260200184815260200183815260200182815260200194505050505060405180910390a15050565b600080600360008581526020019081526020016000209050611077816112c6565b61108057600080fd5b600061108b82611342565b90508084101561109a57600080fd5b60008260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506110cc86611435565b60008211156111335760006110e0836114f1565b9050600081840390508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561112f573d6000803e3d6000fd5b5050505b600082860390503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611180573d6000803e3d6000fd5b507f4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd2878433604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a18294505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156112aa57600080fd5b505af11580156112be573d6000803e3d6000fd5b505050505050565b6000808260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16119050919050565b6112fd82611435565b6113078183611201565b7f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df826040518082815260200191505060405180910390a15050565b600080600090508260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1642111561139b578260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16420390505b61142d8360010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168560020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168461150a565b915050919050565b60036000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff0219169055505050565b600061271060025483028161150257fe5b049050919050565b600082821061151b57839050611540565b600085850390506000848483028161152f57fe5b059050600081880190508093505050505b949350505050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152509056fea265627a7a72315820b59e68dd3ddcd86cf6e5e070a7749b852cd779a3ae918761ec1e5a3bdb02b0bd64736f6c634300050c0032";
        const data = bytecode + client.encode("", ["address", "uint256"], _nftAddress, _cut);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        AuctionCancelled(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionCancelled", this.address, callback); }
        AuctionCreated(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionCreated", this.address, callback); }
        AuctionSuccessful(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionSuccessful", this.address, callback); }
        Pause(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Pause", this.address, callback); }
        Unpause(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Unpause", this.address, callback); }
        bid(_tokenId: number) {
            const data = Encode(this.client).bid(_tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).bid();
            });
        }
        cancelAuction(_tokenId: number) {
            const data = Encode(this.client).cancelAuction(_tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cancelAuction();
            });
        }
        cancelAuctionWhenPaused(_tokenId: number) {
            const data = Encode(this.client).cancelAuctionWhenPaused(_tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cancelAuctionWhenPaused();
            });
        }
        createAuction(_tokenId: number, _startingPrice: number, _endingPrice: number, _duration: number, _seller: string) {
            const data = Encode(this.client).createAuction(_tokenId, _startingPrice, _endingPrice, _duration, _seller);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createAuction();
            });
        }
        getAuction(_tokenId: number) {
            const data = Encode(this.client).getAuction(_tokenId);
            return Call<Tx, {
                seller: string;
                startingPrice: number;
                endingPrice: number;
                duration: number;
                startedAt: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).getAuction();
            });
        }
        getCurrentPrice(_tokenId: number) {
            const data = Encode(this.client).getCurrentPrice(_tokenId);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).getCurrentPrice();
            });
        }
        nonFungibleContract() {
            const data = Encode(this.client).nonFungibleContract();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).nonFungibleContract();
            });
        }
        owner() {
            const data = Encode(this.client).owner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).owner();
            });
        }
        ownerCut() {
            const data = Encode(this.client).ownerCut();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerCut();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        transferOwnership(newOwner: string) {
            const data = Encode(this.client).transferOwnership(newOwner);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferOwnership();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
        withdrawBalance() {
            const data = Encode(this.client).withdrawBalance();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).withdrawBalance();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        bid: (_tokenId: number) => { return client.encode("454A2AB3", ["uint256"], _tokenId); },
        cancelAuction: (_tokenId: number) => { return client.encode("96B5A755", ["uint256"], _tokenId); },
        cancelAuctionWhenPaused: (_tokenId: number) => { return client.encode("878EB368", ["uint256"], _tokenId); },
        createAuction: (_tokenId: number, _startingPrice: number, _endingPrice: number, _duration: number, _seller: string) => { return client.encode("27EBE40A", ["uint256", "uint256", "uint256", "uint256", "address"], _tokenId, _startingPrice, _endingPrice, _duration, _seller); },
        getAuction: (_tokenId: number) => { return client.encode("78BD7935", ["uint256"], _tokenId); },
        getCurrentPrice: (_tokenId: number) => { return client.encode("C55D0F56", ["uint256"], _tokenId); },
        nonFungibleContract: () => { return client.encode("DD1B7A0F", []); },
        owner: () => { return client.encode("8DA5CB5B", []); },
        ownerCut: () => { return client.encode("83B5FF8B", []); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        transferOwnership: (newOwner: string) => { return client.encode("F2FDE38B", ["address"], newOwner); },
        unpause: () => { return client.encode("3F4BA83A", []); },
        withdrawBalance: () => { return client.encode("5FD8C710", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        bid: (): void => { return; },
        cancelAuction: (): void => { return; },
        cancelAuctionWhenPaused: (): void => { return; },
        createAuction: (): void => { return; },
        getAuction: (): {
            seller: string;
            startingPrice: number;
            endingPrice: number;
            duration: number;
            startedAt: number;
        } => {
            const [seller, startingPrice, endingPrice, duration, startedAt] = client.decode(data, ["address", "uint256", "uint256", "uint256", "uint256"]);
            return { seller: seller, startingPrice: startingPrice, endingPrice: endingPrice, duration: duration, startedAt: startedAt };
        },
        getCurrentPrice: (): [number] => { return client.decode(data, ["uint256"]); },
        nonFungibleContract: (): [string] => { return client.decode(data, ["address"]); },
        owner: (): [string] => { return client.decode(data, ["address"]); },
        ownerCut: (): [number] => { return client.decode(data, ["uint256"]); },
        pause: (): [boolean] => { return client.decode(data, ["bool"]); },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        transferOwnership: (): void => { return; },
        unpause: (): [boolean] => { return client.decode(data, ["bool"]); },
        withdrawBalance: (): void => { return; }
    }; };
}
export module ClockAuctionBase {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "608060405234801561001057600080fd5b5060fb8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806383b5ff8b146037578063dd1b7a0f146053575b600080fd5b603d609b565b6040518082815260200191505060405180910390f35b605960a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a723158208f0b07ebffcfd572483e0421494812c55e1ce762f98187ce0c41c9924b34ee6d64736f6c634300050c0032";
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        AuctionCancelled(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionCancelled", this.address, callback); }
        AuctionCreated(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionCreated", this.address, callback); }
        AuctionSuccessful(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionSuccessful", this.address, callback); }
        nonFungibleContract() {
            const data = Encode(this.client).nonFungibleContract();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).nonFungibleContract();
            });
        }
        ownerCut() {
            const data = Encode(this.client).ownerCut();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerCut();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        nonFungibleContract: () => { return client.encode("DD1B7A0F", []); },
        ownerCut: () => { return client.encode("83B5FF8B", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        nonFungibleContract: (): [string] => { return client.decode(data, ["address"]); },
        ownerCut: (): [number] => { return client.decode(data, ["uint256"]); }
    }; };
}
export module ERC721 {
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        Approval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Approval", this.address, callback); }
        Transfer(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Transfer", this.address, callback); }
        approve(_to: string, _tokenId: number) {
            const data = Encode(this.client).approve(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approve();
            });
        }
        balanceOf(_owner: string) {
            const data = Encode(this.client).balanceOf(_owner);
            return Call<Tx, {
                balance: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).balanceOf();
            });
        }
        ownerOf(_tokenId: number) {
            const data = Encode(this.client).ownerOf(_tokenId);
            return Call<Tx, {
                owner: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerOf();
            });
        }
        supportsInterface(_interfaceID: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceID);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
        totalSupply() {
            const data = Encode(this.client).totalSupply();
            return Call<Tx, {
                total: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).totalSupply();
            });
        }
        transfer(_to: string, _tokenId: number) {
            const data = Encode(this.client).transfer(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transfer();
            });
        }
        transferFrom(_from: string, _to: string, _tokenId: number) {
            const data = Encode(this.client).transferFrom(_from, _to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferFrom();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        approve: (_to: string, _tokenId: number) => { return client.encode("095EA7B3", ["address", "uint256"], _to, _tokenId); },
        balanceOf: (_owner: string) => { return client.encode("70A08231", ["address"], _owner); },
        ownerOf: (_tokenId: number) => { return client.encode("6352211E", ["uint256"], _tokenId); },
        supportsInterface: (_interfaceID: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceID); },
        totalSupply: () => { return client.encode("18160DDD", []); },
        transfer: (_to: string, _tokenId: number) => { return client.encode("A9059CBB", ["address", "uint256"], _to, _tokenId); },
        transferFrom: (_from: string, _to: string, _tokenId: number) => { return client.encode("23B872DD", ["address", "address", "uint256"], _from, _to, _tokenId); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        approve: (): void => { return; },
        balanceOf: (): {
            balance: number;
        } => {
            const [balance] = client.decode(data, ["uint256"]);
            return { balance: balance };
        },
        ownerOf: (): {
            owner: string;
        } => {
            const [owner] = client.decode(data, ["address"]);
            return { owner: owner };
        },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        totalSupply: (): {
            total: number;
        } => {
            const [total] = client.decode(data, ["uint256"]);
            return { total: total };
        },
        transfer: (): void => { return; },
        transferFrom: (): void => { return; }
    }; };
}
export module ERC721Metadata {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "608060405234801561001057600080fd5b50610355806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063cb4799f214610030575b600080fd5b6100f36004803603604081101561004657600080fd5b81019080803590602001909291908035906020019064010000000081111561006d57600080fd5b82018360208201111561007f57600080fd5b803590602001918460018302840111640100000000831117156100a157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610138565b6040518083600460200280838360005b8381101561011e578082015181840152602081019050610103565b505050509050018281526020019250505060405180910390f35b6101406102fe565b6000600184141561018b577f48656c6c6f20576f726c6421203a4400000000000000000000000000000000008260006004811061017957fe5b602002018181525050600f90506102f7565b600284141561020b577f4920776f756c6420646566696e6974656c792063686f6f73652061206d656469826000600481106101c257fe5b6020020181815250507f756d206c656e67746820737472696e672e000000000000000000000000000000826001600481106101f957fe5b602002018181525050603190506102f6565b60038414156102f5577f4c6f72656d20697073756d20646f6c6f722073697420616d65742c206d6920658260006004811061024257fe5b6020020181815250507f737420616363756d73616e2064617069627573206175677565206c6f72656d2c8260016004811061027957fe5b6020020181815250507f2074726973746971756520766573746962756c756d2069642c206c696265726f826002600481106102b057fe5b6020020181815250507f207375736369706974207661726975732073617069656e20616c697175616d2e826003600481106102e757fe5b602002018181525050608090505b5b5b9250929050565b604051806080016040528060049060208202803883398082019150509050509056fea265627a7a72315820dd7d29303cd08746dd76693e852e219b5f6a6732c0dcfab9daca961b63b8e30e64736f6c634300050c0032";
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        getMetadata(_tokenId: number) {
            const data = Encode(this.client).getMetadata(_tokenId);
            return Call<Tx, {
                buffer: [Buffer, Buffer, Buffer, Buffer];
                count: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).getMetadata();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        getMetadata: (_tokenId: number) => { return client.encode("CB4799F2", ["uint256"], _tokenId); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        getMetadata: (): {
            buffer: [Buffer, Buffer, Buffer, Buffer];
            count: number;
        } => {
            const [buffer, count] = client.decode(data, ["bytes32[4]", "uint256"]);
            return { buffer: buffer, count: count };
        }
    }; };
}
export module GeneScienceInterface {
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        isGeneScience() {
            const data = Encode(this.client).isGeneScience();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isGeneScience();
            });
        }
        mixGenes(genes1: number, genes2: number, targetBlock: number) {
            const data = Encode(this.client).mixGenes(genes1, genes2, targetBlock);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).mixGenes();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        isGeneScience: () => { return client.encode("54C15B82", []); },
        mixGenes: (genes1: number, genes2: number, targetBlock: number) => { return client.encode("0D9F5AED", ["uint256", "uint256", "uint256"], genes1, genes2, targetBlock); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        isGeneScience: (): [boolean] => { return client.decode(data, ["bool"]); },
        mixGenes: (): [number] => { return client.decode(data, ["uint256"]); }
    }; };
}
export module MarmotAccessControl {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "60806040526000600260146101000a81548160ff02191690831515021790555034801561002b57600080fd5b506107848061003b6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80633f4ba83a116100665780633f4ba83a146101b45780634e0a3379146101be5780635c975abb146102025780638456cb5914610224578063b047fb501461022e57610093565b80630519ce79146100985780630a0f8168146100e257806327d7874c1461012c5780632ba73c1514610170575b600080fd5b6100a0610278565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100ea61029e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61016e6004803603602081101561014257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506102c3565b005b6101b26004803603602081101561018657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610399565b005b6101bc610470565b005b610200600480360360208110156101d457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104ff565b005b61020a6105d6565b604051808215151515815260200191505060405180910390f35b61022c6105e9565b005b610236610729565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461031c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561035657600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561042c57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c957600080fd5b600260149054906101000a900460ff166104e257600080fd5b6000600260146101000a81548160ff021916908315150217905550565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461055857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561059257600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260149054906101000a900460ff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061069157506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806106e95750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6106f257600080fd5b600260149054906101000a900460ff161561070c57600080fd5b6001600260146101000a81548160ff021916908315150217905550565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a7231582094bc2eb0d20fe8b6f77bc6ff95dddc975de9baedac0dd884b77f30245978a55b64736f6c634300050c0032";
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        ContractUpgrade(callback: (err: Error, event: any) => void): Readable { return this.client.listen("ContractUpgrade", this.address, callback); }
        ceoAddress() {
            const data = Encode(this.client).ceoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ceoAddress();
            });
        }
        cfoAddress() {
            const data = Encode(this.client).cfoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cfoAddress();
            });
        }
        cooAddress() {
            const data = Encode(this.client).cooAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooAddress();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        setCEO(_newCEO: string) {
            const data = Encode(this.client).setCEO(_newCEO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCEO();
            });
        }
        setCFO(_newCFO: string) {
            const data = Encode(this.client).setCFO(_newCFO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCFO();
            });
        }
        setCOO(_newCOO: string) {
            const data = Encode(this.client).setCOO(_newCOO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCOO();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        ceoAddress: () => { return client.encode("0A0F8168", []); },
        cfoAddress: () => { return client.encode("0519CE79", []); },
        cooAddress: () => { return client.encode("B047FB50", []); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        setCEO: (_newCEO: string) => { return client.encode("27D7874C", ["address"], _newCEO); },
        setCFO: (_newCFO: string) => { return client.encode("4E0A3379", ["address"], _newCFO); },
        setCOO: (_newCOO: string) => { return client.encode("2BA73C15", ["address"], _newCOO); },
        unpause: () => { return client.encode("3F4BA83A", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        ceoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cfoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooAddress: (): [string] => { return client.decode(data, ["address"]); },
        pause: (): void => { return; },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        setCEO: (): void => { return; },
        setCFO: (): void => { return; },
        setCOO: (): void => { return; },
        unpause: (): void => { return; }
    }; };
}
export module MarmotAuction {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "";
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        Approval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Approval", this.address, callback); }
        Birth(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Birth", this.address, callback); }
        ContractUpgrade(callback: (err: Error, event: any) => void): Readable { return this.client.listen("ContractUpgrade", this.address, callback); }
        Pregnant(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Pregnant", this.address, callback); }
        Transfer(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Transfer", this.address, callback); }
        approve(_to: string, _tokenId: number) {
            const data = Encode(this.client).approve(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approve();
            });
        }
        approveSiring(_addr: string, _sireId: number) {
            const data = Encode(this.client).approveSiring(_addr, _sireId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approveSiring();
            });
        }
        autoBirthFee() {
            const data = Encode(this.client).autoBirthFee();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).autoBirthFee();
            });
        }
        balanceOf(_owner: string) {
            const data = Encode(this.client).balanceOf(_owner);
            return Call<Tx, {
                count: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).balanceOf();
            });
        }
        bidOnSiringAuction(_sireId: number, _matronId: number) {
            const data = Encode(this.client).bidOnSiringAuction(_sireId, _matronId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).bidOnSiringAuction();
            });
        }
        breedWithAuto(_matronId: number, _sireId: number) {
            const data = Encode(this.client).breedWithAuto(_matronId, _sireId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).breedWithAuto();
            });
        }
        canBreedWith(_matronId: number, _sireId: number) {
            const data = Encode(this.client).canBreedWith(_matronId, _sireId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).canBreedWith();
            });
        }
        ceoAddress() {
            const data = Encode(this.client).ceoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ceoAddress();
            });
        }
        cfoAddress() {
            const data = Encode(this.client).cfoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cfoAddress();
            });
        }
        cooAddress() {
            const data = Encode(this.client).cooAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooAddress();
            });
        }
        cooldowns() {
            const data = Encode(this.client).cooldowns();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooldowns();
            });
        }
        createSaleAuction(_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) {
            const data = Encode(this.client).createSaleAuction(_marmotId, _startingPrice, _endingPrice, _duration);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createSaleAuction();
            });
        }
        createSiringAuction(_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) {
            const data = Encode(this.client).createSiringAuction(_marmotId, _startingPrice, _endingPrice, _duration);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createSiringAuction();
            });
        }
        erc721Metadata() {
            const data = Encode(this.client).erc721Metadata();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).erc721Metadata();
            });
        }
        geneScience() {
            const data = Encode(this.client).geneScience();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).geneScience();
            });
        }
        giveBirth(_matronId: number) {
            const data = Encode(this.client).giveBirth(_matronId);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).giveBirth();
            });
        }
        isPregnant(_marmotId: number) {
            const data = Encode(this.client).isPregnant(_marmotId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isPregnant();
            });
        }
        isReadyToBreed(_marmotId: number) {
            const data = Encode(this.client).isReadyToBreed(_marmotId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isReadyToBreed();
            });
        }
        marmotIndexToApproved() {
            const data = Encode(this.client).marmotIndexToApproved();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToApproved();
            });
        }
        marmotIndexToOwner() {
            const data = Encode(this.client).marmotIndexToOwner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToOwner();
            });
        }
        name() {
            const data = Encode(this.client).name();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).name();
            });
        }
        ownerOf(_tokenId: number) {
            const data = Encode(this.client).ownerOf(_tokenId);
            return Call<Tx, {
                owner: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerOf();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        pregnantMarmots() {
            const data = Encode(this.client).pregnantMarmots();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pregnantMarmots();
            });
        }
        saleAuction() {
            const data = Encode(this.client).saleAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).saleAuction();
            });
        }
        secondsPerBlock() {
            const data = Encode(this.client).secondsPerBlock();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).secondsPerBlock();
            });
        }
        setAutoBirthFee(val: number) {
            const data = Encode(this.client).setAutoBirthFee(val);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setAutoBirthFee();
            });
        }
        setCEO(_newCEO: string) {
            const data = Encode(this.client).setCEO(_newCEO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCEO();
            });
        }
        setCFO(_newCFO: string) {
            const data = Encode(this.client).setCFO(_newCFO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCFO();
            });
        }
        setCOO(_newCOO: string) {
            const data = Encode(this.client).setCOO(_newCOO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCOO();
            });
        }
        setGeneScienceAddress(_address: string) {
            const data = Encode(this.client).setGeneScienceAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setGeneScienceAddress();
            });
        }
        setMetadataAddress(_contractAddress: string) {
            const data = Encode(this.client).setMetadataAddress(_contractAddress);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setMetadataAddress();
            });
        }
        setSaleAuctionAddress(_address: string) {
            const data = Encode(this.client).setSaleAuctionAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSaleAuctionAddress();
            });
        }
        setSecondsPerBlock(secs: number) {
            const data = Encode(this.client).setSecondsPerBlock(secs);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSecondsPerBlock();
            });
        }
        setSiringAuctionAddress(_address: string) {
            const data = Encode(this.client).setSiringAuctionAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSiringAuctionAddress();
            });
        }
        sireAllowedToAddress() {
            const data = Encode(this.client).sireAllowedToAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).sireAllowedToAddress();
            });
        }
        siringAuction() {
            const data = Encode(this.client).siringAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).siringAuction();
            });
        }
        supportsInterface(_interfaceID: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceID);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
        symbol() {
            const data = Encode(this.client).symbol();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).symbol();
            });
        }
        tokenMetadata(_tokenId: number, _preferredTransport: string) {
            const data = Encode(this.client).tokenMetadata(_tokenId, _preferredTransport);
            return Call<Tx, {
                infoUrl: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokenMetadata();
            });
        }
        tokensOfOwner(_owner: string) {
            const data = Encode(this.client).tokensOfOwner(_owner);
            return Call<Tx, {
                ownerTokens: number[];
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokensOfOwner();
            });
        }
        totalSupply() {
            const data = Encode(this.client).totalSupply();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).totalSupply();
            });
        }
        transfer(_to: string, _tokenId: number) {
            const data = Encode(this.client).transfer(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transfer();
            });
        }
        transferFrom(_from: string, _to: string, _tokenId: number) {
            const data = Encode(this.client).transferFrom(_from, _to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferFrom();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
        withdrawAuctionBalances() {
            const data = Encode(this.client).withdrawAuctionBalances();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).withdrawAuctionBalances();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        approve: (_to: string, _tokenId: number) => { return client.encode("095EA7B3", ["address", "uint256"], _to, _tokenId); },
        approveSiring: (_addr: string, _sireId: number) => { return client.encode("4DFFF04F", ["address", "uint256"], _addr, _sireId); },
        autoBirthFee: () => { return client.encode("B0C35C05", []); },
        balanceOf: (_owner: string) => { return client.encode("70A08231", ["address"], _owner); },
        bidOnSiringAuction: (_sireId: number, _matronId: number) => { return client.encode("ED60ADE6", ["uint256", "uint256"], _sireId, _matronId); },
        breedWithAuto: (_matronId: number, _sireId: number) => { return client.encode("F7D8C883", ["uint256", "uint256"], _matronId, _sireId); },
        canBreedWith: (_matronId: number, _sireId: number) => { return client.encode("46D22C70", ["uint256", "uint256"], _matronId, _sireId); },
        ceoAddress: () => { return client.encode("0A0F8168", []); },
        cfoAddress: () => { return client.encode("0519CE79", []); },
        cooAddress: () => { return client.encode("B047FB50", []); },
        cooldowns: () => { return client.encode("9D6FAC6F", []); },
        createSaleAuction: (_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) => { return client.encode("3D7D3F5A", ["uint256", "uint256", "uint256", "uint256"], _marmotId, _startingPrice, _endingPrice, _duration); },
        createSiringAuction: (_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) => { return client.encode("4AD8C938", ["uint256", "uint256", "uint256", "uint256"], _marmotId, _startingPrice, _endingPrice, _duration); },
        erc721Metadata: () => { return client.encode("BC4006F5", []); },
        geneScience: () => { return client.encode("F2B47D52", []); },
        giveBirth: (_matronId: number) => { return client.encode("88C2A0BF", ["uint256"], _matronId); },
        isPregnant: (_marmotId: number) => { return client.encode("1940A936", ["uint256"], _marmotId); },
        isReadyToBreed: (_marmotId: number) => { return client.encode("D3E6F49F", ["uint256"], _marmotId); },
        marmotIndexToApproved: () => { return client.encode("EBC6D2BD", []); },
        marmotIndexToOwner: () => { return client.encode("1AC1B04A", []); },
        name: () => { return client.encode("06FDDE03", []); },
        ownerOf: (_tokenId: number) => { return client.encode("6352211E", ["uint256"], _tokenId); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        pregnantMarmots: () => { return client.encode("35F88BA8", []); },
        saleAuction: () => { return client.encode("E6CBE351", []); },
        secondsPerBlock: () => { return client.encode("7A7D4937", []); },
        setAutoBirthFee: (val: number) => { return client.encode("4B85FD55", ["uint256"], val); },
        setCEO: (_newCEO: string) => { return client.encode("27D7874C", ["address"], _newCEO); },
        setCFO: (_newCFO: string) => { return client.encode("4E0A3379", ["address"], _newCFO); },
        setCOO: (_newCOO: string) => { return client.encode("2BA73C15", ["address"], _newCOO); },
        setGeneScienceAddress: (_address: string) => { return client.encode("24E7A38A", ["address"], _address); },
        setMetadataAddress: (_contractAddress: string) => { return client.encode("E17B25AF", ["address"], _contractAddress); },
        setSaleAuctionAddress: (_address: string) => { return client.encode("6FBDE40D", ["address"], _address); },
        setSecondsPerBlock: (secs: number) => { return client.encode("5663896E", ["uint256"], secs); },
        setSiringAuctionAddress: (_address: string) => { return client.encode("14001F4C", ["address"], _address); },
        sireAllowedToAddress: () => { return client.encode("46116E6F", []); },
        siringAuction: () => { return client.encode("21717EBF", []); },
        supportsInterface: (_interfaceID: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceID); },
        symbol: () => { return client.encode("95D89B41", []); },
        tokenMetadata: (_tokenId: number, _preferredTransport: string) => { return client.encode("0560FF44", ["uint256", "string"], _tokenId, _preferredTransport); },
        tokensOfOwner: (_owner: string) => { return client.encode("8462151C", ["address"], _owner); },
        totalSupply: () => { return client.encode("18160DDD", []); },
        transfer: (_to: string, _tokenId: number) => { return client.encode("A9059CBB", ["address", "uint256"], _to, _tokenId); },
        transferFrom: (_from: string, _to: string, _tokenId: number) => { return client.encode("23B872DD", ["address", "address", "uint256"], _from, _to, _tokenId); },
        unpause: () => { return client.encode("3F4BA83A", []); },
        withdrawAuctionBalances: () => { return client.encode("91876E57", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        approve: (): void => { return; },
        approveSiring: (): void => { return; },
        autoBirthFee: (): [number] => { return client.decode(data, ["uint256"]); },
        balanceOf: (): {
            count: number;
        } => {
            const [count] = client.decode(data, ["uint256"]);
            return { count: count };
        },
        bidOnSiringAuction: (): void => { return; },
        breedWithAuto: (): void => { return; },
        canBreedWith: (): [boolean] => { return client.decode(data, ["bool"]); },
        ceoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cfoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooldowns: (): [number] => { return client.decode(data, ["uint32"]); },
        createSaleAuction: (): void => { return; },
        createSiringAuction: (): void => { return; },
        erc721Metadata: (): [string] => { return client.decode(data, ["address"]); },
        geneScience: (): [string] => { return client.decode(data, ["address"]); },
        giveBirth: (): [number] => { return client.decode(data, ["uint256"]); },
        isPregnant: (): [boolean] => { return client.decode(data, ["bool"]); },
        isReadyToBreed: (): [boolean] => { return client.decode(data, ["bool"]); },
        marmotIndexToApproved: (): [string] => { return client.decode(data, ["address"]); },
        marmotIndexToOwner: (): [string] => { return client.decode(data, ["address"]); },
        name: (): [string] => { return client.decode(data, ["string"]); },
        ownerOf: (): {
            owner: string;
        } => {
            const [owner] = client.decode(data, ["address"]);
            return { owner: owner };
        },
        pause: (): void => { return; },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        pregnantMarmots: (): [number] => { return client.decode(data, ["uint256"]); },
        saleAuction: (): [string] => { return client.decode(data, ["address"]); },
        secondsPerBlock: (): [number] => { return client.decode(data, ["uint256"]); },
        setAutoBirthFee: (): void => { return; },
        setCEO: (): void => { return; },
        setCFO: (): void => { return; },
        setCOO: (): void => { return; },
        setGeneScienceAddress: (): void => { return; },
        setMetadataAddress: (): void => { return; },
        setSaleAuctionAddress: (): void => { return; },
        setSecondsPerBlock: (): void => { return; },
        setSiringAuctionAddress: (): void => { return; },
        sireAllowedToAddress: (): [string] => { return client.decode(data, ["address"]); },
        siringAuction: (): [string] => { return client.decode(data, ["address"]); },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        symbol: (): [string] => { return client.decode(data, ["string"]); },
        tokenMetadata: (): {
            infoUrl: string;
        } => {
            const [infoUrl] = client.decode(data, ["string"]);
            return { infoUrl: infoUrl };
        },
        tokensOfOwner: (): {
            ownerTokens: number[];
        } => {
            const [ownerTokens] = client.decode(data, ["uint256[]"]);
            return { ownerTokens: ownerTokens };
        },
        totalSupply: (): [number] => { return client.decode(data, ["uint256"]); },
        transfer: (): void => { return; },
        transferFrom: (): void => { return; },
        unpause: (): void => { return; },
        withdrawAuctionBalances: (): void => { return; }
    }; };
}
export module MarmotBase {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "60806040526000600260146101000a81548160ff021916908315150217905550604051806101c00160405280603c63ffffffff1663ffffffff168152602001607863ffffffff1663ffffffff16815260200161012c63ffffffff1663ffffffff16815260200161025863ffffffff1663ffffffff16815260200161070863ffffffff1663ffffffff168152602001610e1063ffffffff1663ffffffff168152602001611c2063ffffffff1663ffffffff16815260200161384063ffffffff1663ffffffff16815260200161708063ffffffff1663ffffffff16815260200161e10063ffffffff1663ffffffff1681526020016201518063ffffffff1663ffffffff1681526020016202a30063ffffffff1663ffffffff1681526020016205460063ffffffff1663ffffffff16815260200162093a8063ffffffff1663ffffffff16815250600390600e61015392919061016b565b50600f60055534801561016557600080fd5b50610241565b82600e6007016008900481019282156101fd5791602002820160005b838211156101cb57835183826101000a81548163ffffffff021916908363ffffffff1602179055509260200192600401602081600301049283019260010302610187565b80156101fb5782816101000a81549063ffffffff02191690556004016020816003010492830192600103026101cb565b505b50905061020a919061020e565b5090565b61023e91905b8082111561023a57600081816101000a81549063ffffffff021916905550600101610214565b5090565b90565b610cda806102506000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80634e0a3379116100a25780638456cb59116100715780638456cb591461040e5780639d6fac6f14610418578063b047fb5014610466578063e6cbe351146104b0578063ebc6d2bd146104fa5761010b565b80634e0a33791461035c5780635663896e146103a05780635c975abb146103ce5780637a7d4937146103f05761010b565b806327d7874c116100de57806327d7874c1461025c5780632ba73c15146102a05780633f4ba83a146102e457806346116e6f146102ee5761010b565b80630519ce79146101105780630a0f81681461015a5780631ac1b04a146101a457806321717ebf14610212575b600080fd5b610118610568565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61016261058e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6101d0600480360360208110156101ba57600080fd5b81019080803590602001909291905050506105b3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61021a6105e6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61029e6004803603602081101561027257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061060c565b005b6102e2600480360360208110156102b657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106e2565b005b6102ec6107b9565b005b61031a6004803603602081101561030457600080fd5b8101908080359060200190929190505050610848565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61039e6004803603602081101561037257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061087b565b005b6103cc600480360360208110156103b657600080fd5b8101908080359060200190929190505050610952565b005b6103d6610aa0565b604051808215151515815260200191505060405180910390f35b6103f8610ab3565b6040518082815260200191505060405180910390f35b610416610ab9565b005b6104446004803603602081101561042e57600080fd5b8101908080359060200190929190505050610bf9565b604051808263ffffffff1663ffffffff16815260200191505060405180910390f35b61046e610c26565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104b8610c4c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105266004803603602081101561051057600080fd5b8101908080359060200190929190505050610c72565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561069f57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561077557600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461081257600080fd5b600260149054906101000a900460ff1661082b57600080fd5b6000600260146101000a81548160ff021916908315150217905550565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108d457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561090e57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109fa57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610a525750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a5b57600080fd5b60036000600e8110610a6957fe5b600891828204019190066004029054906101000a900463ffffffff1663ffffffff168110610a9657600080fd5b8060058190555050565b600260149054906101000a900460ff1681565b60055481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b6157506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610bb95750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610bc257600080fd5b600260149054906101000a900460ff1615610bdc57600080fd5b6001600260146101000a81548160ff021916908315150217905550565b600381600e8110610c0657fe5b60089182820401919006600402915054906101000a900463ffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff168156fea265627a7a7231582065f0e04343e682b49be9446970168fe48ed3b1e23a4e0eac033809c73994ba9f64736f6c634300050c0032";
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        Birth(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Birth", this.address, callback); }
        ContractUpgrade(callback: (err: Error, event: any) => void): Readable { return this.client.listen("ContractUpgrade", this.address, callback); }
        Transfer(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Transfer", this.address, callback); }
        ceoAddress() {
            const data = Encode(this.client).ceoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ceoAddress();
            });
        }
        cfoAddress() {
            const data = Encode(this.client).cfoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cfoAddress();
            });
        }
        cooAddress() {
            const data = Encode(this.client).cooAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooAddress();
            });
        }
        cooldowns() {
            const data = Encode(this.client).cooldowns();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooldowns();
            });
        }
        marmotIndexToApproved() {
            const data = Encode(this.client).marmotIndexToApproved();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToApproved();
            });
        }
        marmotIndexToOwner() {
            const data = Encode(this.client).marmotIndexToOwner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToOwner();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        saleAuction() {
            const data = Encode(this.client).saleAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).saleAuction();
            });
        }
        secondsPerBlock() {
            const data = Encode(this.client).secondsPerBlock();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).secondsPerBlock();
            });
        }
        setCEO(_newCEO: string) {
            const data = Encode(this.client).setCEO(_newCEO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCEO();
            });
        }
        setCFO(_newCFO: string) {
            const data = Encode(this.client).setCFO(_newCFO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCFO();
            });
        }
        setCOO(_newCOO: string) {
            const data = Encode(this.client).setCOO(_newCOO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCOO();
            });
        }
        setSecondsPerBlock(secs: number) {
            const data = Encode(this.client).setSecondsPerBlock(secs);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSecondsPerBlock();
            });
        }
        sireAllowedToAddress() {
            const data = Encode(this.client).sireAllowedToAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).sireAllowedToAddress();
            });
        }
        siringAuction() {
            const data = Encode(this.client).siringAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).siringAuction();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        ceoAddress: () => { return client.encode("0A0F8168", []); },
        cfoAddress: () => { return client.encode("0519CE79", []); },
        cooAddress: () => { return client.encode("B047FB50", []); },
        cooldowns: () => { return client.encode("9D6FAC6F", []); },
        marmotIndexToApproved: () => { return client.encode("EBC6D2BD", []); },
        marmotIndexToOwner: () => { return client.encode("1AC1B04A", []); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        saleAuction: () => { return client.encode("E6CBE351", []); },
        secondsPerBlock: () => { return client.encode("7A7D4937", []); },
        setCEO: (_newCEO: string) => { return client.encode("27D7874C", ["address"], _newCEO); },
        setCFO: (_newCFO: string) => { return client.encode("4E0A3379", ["address"], _newCFO); },
        setCOO: (_newCOO: string) => { return client.encode("2BA73C15", ["address"], _newCOO); },
        setSecondsPerBlock: (secs: number) => { return client.encode("5663896E", ["uint256"], secs); },
        sireAllowedToAddress: () => { return client.encode("46116E6F", []); },
        siringAuction: () => { return client.encode("21717EBF", []); },
        unpause: () => { return client.encode("3F4BA83A", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        ceoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cfoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooldowns: (): [number] => { return client.decode(data, ["uint32"]); },
        marmotIndexToApproved: (): [string] => { return client.decode(data, ["address"]); },
        marmotIndexToOwner: (): [string] => { return client.decode(data, ["address"]); },
        pause: (): void => { return; },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        saleAuction: (): [string] => { return client.decode(data, ["address"]); },
        secondsPerBlock: (): [number] => { return client.decode(data, ["uint256"]); },
        setCEO: (): void => { return; },
        setCFO: (): void => { return; },
        setCOO: (): void => { return; },
        setSecondsPerBlock: (): void => { return; },
        sireAllowedToAddress: (): [string] => { return client.decode(data, ["address"]); },
        siringAuction: (): [string] => { return client.decode(data, ["address"]); },
        unpause: (): void => { return; }
    }; };
}
export module MarmotBreeding {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "";
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        Approval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Approval", this.address, callback); }
        Birth(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Birth", this.address, callback); }
        ContractUpgrade(callback: (err: Error, event: any) => void): Readable { return this.client.listen("ContractUpgrade", this.address, callback); }
        Pregnant(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Pregnant", this.address, callback); }
        Transfer(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Transfer", this.address, callback); }
        approve(_to: string, _tokenId: number) {
            const data = Encode(this.client).approve(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approve();
            });
        }
        approveSiring(_addr: string, _sireId: number) {
            const data = Encode(this.client).approveSiring(_addr, _sireId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approveSiring();
            });
        }
        autoBirthFee() {
            const data = Encode(this.client).autoBirthFee();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).autoBirthFee();
            });
        }
        balanceOf(_owner: string) {
            const data = Encode(this.client).balanceOf(_owner);
            return Call<Tx, {
                count: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).balanceOf();
            });
        }
        breedWithAuto(_matronId: number, _sireId: number) {
            const data = Encode(this.client).breedWithAuto(_matronId, _sireId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).breedWithAuto();
            });
        }
        canBreedWith(_matronId: number, _sireId: number) {
            const data = Encode(this.client).canBreedWith(_matronId, _sireId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).canBreedWith();
            });
        }
        ceoAddress() {
            const data = Encode(this.client).ceoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ceoAddress();
            });
        }
        cfoAddress() {
            const data = Encode(this.client).cfoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cfoAddress();
            });
        }
        cooAddress() {
            const data = Encode(this.client).cooAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooAddress();
            });
        }
        cooldowns() {
            const data = Encode(this.client).cooldowns();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooldowns();
            });
        }
        erc721Metadata() {
            const data = Encode(this.client).erc721Metadata();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).erc721Metadata();
            });
        }
        geneScience() {
            const data = Encode(this.client).geneScience();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).geneScience();
            });
        }
        giveBirth(_matronId: number) {
            const data = Encode(this.client).giveBirth(_matronId);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).giveBirth();
            });
        }
        isPregnant(_marmotId: number) {
            const data = Encode(this.client).isPregnant(_marmotId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isPregnant();
            });
        }
        isReadyToBreed(_marmotId: number) {
            const data = Encode(this.client).isReadyToBreed(_marmotId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isReadyToBreed();
            });
        }
        marmotIndexToApproved() {
            const data = Encode(this.client).marmotIndexToApproved();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToApproved();
            });
        }
        marmotIndexToOwner() {
            const data = Encode(this.client).marmotIndexToOwner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToOwner();
            });
        }
        name() {
            const data = Encode(this.client).name();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).name();
            });
        }
        ownerOf(_tokenId: number) {
            const data = Encode(this.client).ownerOf(_tokenId);
            return Call<Tx, {
                owner: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerOf();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        pregnantMarmots() {
            const data = Encode(this.client).pregnantMarmots();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pregnantMarmots();
            });
        }
        saleAuction() {
            const data = Encode(this.client).saleAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).saleAuction();
            });
        }
        secondsPerBlock() {
            const data = Encode(this.client).secondsPerBlock();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).secondsPerBlock();
            });
        }
        setAutoBirthFee(val: number) {
            const data = Encode(this.client).setAutoBirthFee(val);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setAutoBirthFee();
            });
        }
        setCEO(_newCEO: string) {
            const data = Encode(this.client).setCEO(_newCEO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCEO();
            });
        }
        setCFO(_newCFO: string) {
            const data = Encode(this.client).setCFO(_newCFO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCFO();
            });
        }
        setCOO(_newCOO: string) {
            const data = Encode(this.client).setCOO(_newCOO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCOO();
            });
        }
        setGeneScienceAddress(_address: string) {
            const data = Encode(this.client).setGeneScienceAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setGeneScienceAddress();
            });
        }
        setMetadataAddress(_contractAddress: string) {
            const data = Encode(this.client).setMetadataAddress(_contractAddress);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setMetadataAddress();
            });
        }
        setSecondsPerBlock(secs: number) {
            const data = Encode(this.client).setSecondsPerBlock(secs);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSecondsPerBlock();
            });
        }
        sireAllowedToAddress() {
            const data = Encode(this.client).sireAllowedToAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).sireAllowedToAddress();
            });
        }
        siringAuction() {
            const data = Encode(this.client).siringAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).siringAuction();
            });
        }
        supportsInterface(_interfaceID: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceID);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
        symbol() {
            const data = Encode(this.client).symbol();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).symbol();
            });
        }
        tokenMetadata(_tokenId: number, _preferredTransport: string) {
            const data = Encode(this.client).tokenMetadata(_tokenId, _preferredTransport);
            return Call<Tx, {
                infoUrl: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokenMetadata();
            });
        }
        tokensOfOwner(_owner: string) {
            const data = Encode(this.client).tokensOfOwner(_owner);
            return Call<Tx, {
                ownerTokens: number[];
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokensOfOwner();
            });
        }
        totalSupply() {
            const data = Encode(this.client).totalSupply();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).totalSupply();
            });
        }
        transfer(_to: string, _tokenId: number) {
            const data = Encode(this.client).transfer(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transfer();
            });
        }
        transferFrom(_from: string, _to: string, _tokenId: number) {
            const data = Encode(this.client).transferFrom(_from, _to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferFrom();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        approve: (_to: string, _tokenId: number) => { return client.encode("095EA7B3", ["address", "uint256"], _to, _tokenId); },
        approveSiring: (_addr: string, _sireId: number) => { return client.encode("4DFFF04F", ["address", "uint256"], _addr, _sireId); },
        autoBirthFee: () => { return client.encode("B0C35C05", []); },
        balanceOf: (_owner: string) => { return client.encode("70A08231", ["address"], _owner); },
        breedWithAuto: (_matronId: number, _sireId: number) => { return client.encode("F7D8C883", ["uint256", "uint256"], _matronId, _sireId); },
        canBreedWith: (_matronId: number, _sireId: number) => { return client.encode("46D22C70", ["uint256", "uint256"], _matronId, _sireId); },
        ceoAddress: () => { return client.encode("0A0F8168", []); },
        cfoAddress: () => { return client.encode("0519CE79", []); },
        cooAddress: () => { return client.encode("B047FB50", []); },
        cooldowns: () => { return client.encode("9D6FAC6F", []); },
        erc721Metadata: () => { return client.encode("BC4006F5", []); },
        geneScience: () => { return client.encode("F2B47D52", []); },
        giveBirth: (_matronId: number) => { return client.encode("88C2A0BF", ["uint256"], _matronId); },
        isPregnant: (_marmotId: number) => { return client.encode("1940A936", ["uint256"], _marmotId); },
        isReadyToBreed: (_marmotId: number) => { return client.encode("D3E6F49F", ["uint256"], _marmotId); },
        marmotIndexToApproved: () => { return client.encode("EBC6D2BD", []); },
        marmotIndexToOwner: () => { return client.encode("1AC1B04A", []); },
        name: () => { return client.encode("06FDDE03", []); },
        ownerOf: (_tokenId: number) => { return client.encode("6352211E", ["uint256"], _tokenId); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        pregnantMarmots: () => { return client.encode("35F88BA8", []); },
        saleAuction: () => { return client.encode("E6CBE351", []); },
        secondsPerBlock: () => { return client.encode("7A7D4937", []); },
        setAutoBirthFee: (val: number) => { return client.encode("4B85FD55", ["uint256"], val); },
        setCEO: (_newCEO: string) => { return client.encode("27D7874C", ["address"], _newCEO); },
        setCFO: (_newCFO: string) => { return client.encode("4E0A3379", ["address"], _newCFO); },
        setCOO: (_newCOO: string) => { return client.encode("2BA73C15", ["address"], _newCOO); },
        setGeneScienceAddress: (_address: string) => { return client.encode("24E7A38A", ["address"], _address); },
        setMetadataAddress: (_contractAddress: string) => { return client.encode("E17B25AF", ["address"], _contractAddress); },
        setSecondsPerBlock: (secs: number) => { return client.encode("5663896E", ["uint256"], secs); },
        sireAllowedToAddress: () => { return client.encode("46116E6F", []); },
        siringAuction: () => { return client.encode("21717EBF", []); },
        supportsInterface: (_interfaceID: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceID); },
        symbol: () => { return client.encode("95D89B41", []); },
        tokenMetadata: (_tokenId: number, _preferredTransport: string) => { return client.encode("0560FF44", ["uint256", "string"], _tokenId, _preferredTransport); },
        tokensOfOwner: (_owner: string) => { return client.encode("8462151C", ["address"], _owner); },
        totalSupply: () => { return client.encode("18160DDD", []); },
        transfer: (_to: string, _tokenId: number) => { return client.encode("A9059CBB", ["address", "uint256"], _to, _tokenId); },
        transferFrom: (_from: string, _to: string, _tokenId: number) => { return client.encode("23B872DD", ["address", "address", "uint256"], _from, _to, _tokenId); },
        unpause: () => { return client.encode("3F4BA83A", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        approve: (): void => { return; },
        approveSiring: (): void => { return; },
        autoBirthFee: (): [number] => { return client.decode(data, ["uint256"]); },
        balanceOf: (): {
            count: number;
        } => {
            const [count] = client.decode(data, ["uint256"]);
            return { count: count };
        },
        breedWithAuto: (): void => { return; },
        canBreedWith: (): [boolean] => { return client.decode(data, ["bool"]); },
        ceoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cfoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooldowns: (): [number] => { return client.decode(data, ["uint32"]); },
        erc721Metadata: (): [string] => { return client.decode(data, ["address"]); },
        geneScience: (): [string] => { return client.decode(data, ["address"]); },
        giveBirth: (): [number] => { return client.decode(data, ["uint256"]); },
        isPregnant: (): [boolean] => { return client.decode(data, ["bool"]); },
        isReadyToBreed: (): [boolean] => { return client.decode(data, ["bool"]); },
        marmotIndexToApproved: (): [string] => { return client.decode(data, ["address"]); },
        marmotIndexToOwner: (): [string] => { return client.decode(data, ["address"]); },
        name: (): [string] => { return client.decode(data, ["string"]); },
        ownerOf: (): {
            owner: string;
        } => {
            const [owner] = client.decode(data, ["address"]);
            return { owner: owner };
        },
        pause: (): void => { return; },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        pregnantMarmots: (): [number] => { return client.decode(data, ["uint256"]); },
        saleAuction: (): [string] => { return client.decode(data, ["address"]); },
        secondsPerBlock: (): [number] => { return client.decode(data, ["uint256"]); },
        setAutoBirthFee: (): void => { return; },
        setCEO: (): void => { return; },
        setCFO: (): void => { return; },
        setCOO: (): void => { return; },
        setGeneScienceAddress: (): void => { return; },
        setMetadataAddress: (): void => { return; },
        setSecondsPerBlock: (): void => { return; },
        sireAllowedToAddress: (): [string] => { return client.decode(data, ["address"]); },
        siringAuction: (): [string] => { return client.decode(data, ["address"]); },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        symbol: (): [string] => { return client.decode(data, ["string"]); },
        tokenMetadata: (): {
            infoUrl: string;
        } => {
            const [infoUrl] = client.decode(data, ["string"]);
            return { infoUrl: infoUrl };
        },
        tokensOfOwner: (): {
            ownerTokens: number[];
        } => {
            const [ownerTokens] = client.decode(data, ["uint256[]"]);
            return { ownerTokens: ownerTokens };
        },
        totalSupply: (): [number] => { return client.decode(data, ["uint256"]); },
        transfer: (): void => { return; },
        transferFrom: (): void => { return; },
        unpause: (): void => { return; }
    }; };
}
export module MarmotCore {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "";
        const data = bytecode + client.encode("", []);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        Approval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Approval", this.address, callback); }
        Birth(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Birth", this.address, callback); }
        ContractUpgrade(callback: (err: Error, event: any) => void): Readable { return this.client.listen("ContractUpgrade", this.address, callback); }
        Pregnant(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Pregnant", this.address, callback); }
        Transfer(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Transfer", this.address, callback); }
        GEN0_AUCTION_DURATION() {
            const data = Encode(this.client).GEN0_AUCTION_DURATION();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).GEN0_AUCTION_DURATION();
            });
        }
        GEN0_CREATION_LIMIT() {
            const data = Encode(this.client).GEN0_CREATION_LIMIT();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).GEN0_CREATION_LIMIT();
            });
        }
        GEN0_STARTING_PRICE() {
            const data = Encode(this.client).GEN0_STARTING_PRICE();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).GEN0_STARTING_PRICE();
            });
        }
        PROMO_CREATION_LIMIT() {
            const data = Encode(this.client).PROMO_CREATION_LIMIT();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).PROMO_CREATION_LIMIT();
            });
        }
        approve(_to: string, _tokenId: number) {
            const data = Encode(this.client).approve(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approve();
            });
        }
        approveSiring(_addr: string, _sireId: number) {
            const data = Encode(this.client).approveSiring(_addr, _sireId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approveSiring();
            });
        }
        autoBirthFee() {
            const data = Encode(this.client).autoBirthFee();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).autoBirthFee();
            });
        }
        balanceOf(_owner: string) {
            const data = Encode(this.client).balanceOf(_owner);
            return Call<Tx, {
                count: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).balanceOf();
            });
        }
        bidOnSiringAuction(_sireId: number, _matronId: number) {
            const data = Encode(this.client).bidOnSiringAuction(_sireId, _matronId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).bidOnSiringAuction();
            });
        }
        breedWithAuto(_matronId: number, _sireId: number) {
            const data = Encode(this.client).breedWithAuto(_matronId, _sireId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).breedWithAuto();
            });
        }
        canBreedWith(_matronId: number, _sireId: number) {
            const data = Encode(this.client).canBreedWith(_matronId, _sireId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).canBreedWith();
            });
        }
        ceoAddress() {
            const data = Encode(this.client).ceoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ceoAddress();
            });
        }
        cfoAddress() {
            const data = Encode(this.client).cfoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cfoAddress();
            });
        }
        cooAddress() {
            const data = Encode(this.client).cooAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooAddress();
            });
        }
        cooldowns() {
            const data = Encode(this.client).cooldowns();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooldowns();
            });
        }
        createGen0Auction(_genes: number) {
            const data = Encode(this.client).createGen0Auction(_genes);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createGen0Auction();
            });
        }
        createPromoMarmot(_genes: number, _owner: string) {
            const data = Encode(this.client).createPromoMarmot(_genes, _owner);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createPromoMarmot();
            });
        }
        createSaleAuction(_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) {
            const data = Encode(this.client).createSaleAuction(_marmotId, _startingPrice, _endingPrice, _duration);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createSaleAuction();
            });
        }
        createSiringAuction(_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) {
            const data = Encode(this.client).createSiringAuction(_marmotId, _startingPrice, _endingPrice, _duration);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createSiringAuction();
            });
        }
        erc721Metadata() {
            const data = Encode(this.client).erc721Metadata();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).erc721Metadata();
            });
        }
        gen0CreatedCount() {
            const data = Encode(this.client).gen0CreatedCount();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).gen0CreatedCount();
            });
        }
        geneScience() {
            const data = Encode(this.client).geneScience();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).geneScience();
            });
        }
        getMarmot(_id: number) {
            const data = Encode(this.client).getMarmot(_id);
            return Call<Tx, {
                isGestating: boolean;
                isReady: boolean;
                cooldownIndex: number;
                nextActionAt: number;
                siringWithId: number;
                birthTime: number;
                matronId: number;
                sireId: number;
                generation: number;
                genes: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).getMarmot();
            });
        }
        giveBirth(_matronId: number) {
            const data = Encode(this.client).giveBirth(_matronId);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).giveBirth();
            });
        }
        isPregnant(_marmotId: number) {
            const data = Encode(this.client).isPregnant(_marmotId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isPregnant();
            });
        }
        isReadyToBreed(_marmotId: number) {
            const data = Encode(this.client).isReadyToBreed(_marmotId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isReadyToBreed();
            });
        }
        marmotIndexToApproved() {
            const data = Encode(this.client).marmotIndexToApproved();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToApproved();
            });
        }
        marmotIndexToOwner() {
            const data = Encode(this.client).marmotIndexToOwner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToOwner();
            });
        }
        name() {
            const data = Encode(this.client).name();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).name();
            });
        }
        newContractAddress() {
            const data = Encode(this.client).newContractAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).newContractAddress();
            });
        }
        ownerOf(_tokenId: number) {
            const data = Encode(this.client).ownerOf(_tokenId);
            return Call<Tx, {
                owner: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerOf();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        pregnantMarmots() {
            const data = Encode(this.client).pregnantMarmots();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pregnantMarmots();
            });
        }
        promoCreatedCount() {
            const data = Encode(this.client).promoCreatedCount();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).promoCreatedCount();
            });
        }
        saleAuction() {
            const data = Encode(this.client).saleAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).saleAuction();
            });
        }
        secondsPerBlock() {
            const data = Encode(this.client).secondsPerBlock();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).secondsPerBlock();
            });
        }
        setAutoBirthFee(val: number) {
            const data = Encode(this.client).setAutoBirthFee(val);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setAutoBirthFee();
            });
        }
        setCEO(_newCEO: string) {
            const data = Encode(this.client).setCEO(_newCEO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCEO();
            });
        }
        setCFO(_newCFO: string) {
            const data = Encode(this.client).setCFO(_newCFO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCFO();
            });
        }
        setCOO(_newCOO: string) {
            const data = Encode(this.client).setCOO(_newCOO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCOO();
            });
        }
        setGeneScienceAddress(_address: string) {
            const data = Encode(this.client).setGeneScienceAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setGeneScienceAddress();
            });
        }
        setMetadataAddress(_contractAddress: string) {
            const data = Encode(this.client).setMetadataAddress(_contractAddress);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setMetadataAddress();
            });
        }
        setNewAddress(_v2Address: string) {
            const data = Encode(this.client).setNewAddress(_v2Address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setNewAddress();
            });
        }
        setSaleAuctionAddress(_address: string) {
            const data = Encode(this.client).setSaleAuctionAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSaleAuctionAddress();
            });
        }
        setSecondsPerBlock(secs: number) {
            const data = Encode(this.client).setSecondsPerBlock(secs);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSecondsPerBlock();
            });
        }
        setSiringAuctionAddress(_address: string) {
            const data = Encode(this.client).setSiringAuctionAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSiringAuctionAddress();
            });
        }
        sireAllowedToAddress() {
            const data = Encode(this.client).sireAllowedToAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).sireAllowedToAddress();
            });
        }
        siringAuction() {
            const data = Encode(this.client).siringAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).siringAuction();
            });
        }
        supportsInterface(_interfaceID: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceID);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
        symbol() {
            const data = Encode(this.client).symbol();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).symbol();
            });
        }
        tokenMetadata(_tokenId: number, _preferredTransport: string) {
            const data = Encode(this.client).tokenMetadata(_tokenId, _preferredTransport);
            return Call<Tx, {
                infoUrl: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokenMetadata();
            });
        }
        tokensOfOwner(_owner: string) {
            const data = Encode(this.client).tokensOfOwner(_owner);
            return Call<Tx, {
                ownerTokens: number[];
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokensOfOwner();
            });
        }
        totalSupply() {
            const data = Encode(this.client).totalSupply();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).totalSupply();
            });
        }
        transfer(_to: string, _tokenId: number) {
            const data = Encode(this.client).transfer(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transfer();
            });
        }
        transferFrom(_from: string, _to: string, _tokenId: number) {
            const data = Encode(this.client).transferFrom(_from, _to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferFrom();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
        withdrawAuctionBalances() {
            const data = Encode(this.client).withdrawAuctionBalances();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).withdrawAuctionBalances();
            });
        }
        withdrawBalance() {
            const data = Encode(this.client).withdrawBalance();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).withdrawBalance();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        GEN0_AUCTION_DURATION: () => { return client.encode("19C2F201", []); },
        GEN0_CREATION_LIMIT: () => { return client.encode("680EBA27", []); },
        GEN0_STARTING_PRICE: () => { return client.encode("0E583DF0", []); },
        PROMO_CREATION_LIMIT: () => { return client.encode("DEFB9584", []); },
        approve: (_to: string, _tokenId: number) => { return client.encode("095EA7B3", ["address", "uint256"], _to, _tokenId); },
        approveSiring: (_addr: string, _sireId: number) => { return client.encode("4DFFF04F", ["address", "uint256"], _addr, _sireId); },
        autoBirthFee: () => { return client.encode("B0C35C05", []); },
        balanceOf: (_owner: string) => { return client.encode("70A08231", ["address"], _owner); },
        bidOnSiringAuction: (_sireId: number, _matronId: number) => { return client.encode("ED60ADE6", ["uint256", "uint256"], _sireId, _matronId); },
        breedWithAuto: (_matronId: number, _sireId: number) => { return client.encode("F7D8C883", ["uint256", "uint256"], _matronId, _sireId); },
        canBreedWith: (_matronId: number, _sireId: number) => { return client.encode("46D22C70", ["uint256", "uint256"], _matronId, _sireId); },
        ceoAddress: () => { return client.encode("0A0F8168", []); },
        cfoAddress: () => { return client.encode("0519CE79", []); },
        cooAddress: () => { return client.encode("B047FB50", []); },
        cooldowns: () => { return client.encode("9D6FAC6F", []); },
        createGen0Auction: (_genes: number) => { return client.encode("C3BEA9AF", ["uint256"], _genes); },
        createPromoMarmot: (_genes: number, _owner: string) => { return client.encode("5CC44AD2", ["uint256", "address"], _genes, _owner); },
        createSaleAuction: (_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) => { return client.encode("3D7D3F5A", ["uint256", "uint256", "uint256", "uint256"], _marmotId, _startingPrice, _endingPrice, _duration); },
        createSiringAuction: (_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) => { return client.encode("4AD8C938", ["uint256", "uint256", "uint256", "uint256"], _marmotId, _startingPrice, _endingPrice, _duration); },
        erc721Metadata: () => { return client.encode("BC4006F5", []); },
        gen0CreatedCount: () => { return client.encode("F1CA9410", []); },
        geneScience: () => { return client.encode("F2B47D52", []); },
        getMarmot: (_id: number) => { return client.encode("04A650EA", ["uint256"], _id); },
        giveBirth: (_matronId: number) => { return client.encode("88C2A0BF", ["uint256"], _matronId); },
        isPregnant: (_marmotId: number) => { return client.encode("1940A936", ["uint256"], _marmotId); },
        isReadyToBreed: (_marmotId: number) => { return client.encode("D3E6F49F", ["uint256"], _marmotId); },
        marmotIndexToApproved: () => { return client.encode("EBC6D2BD", []); },
        marmotIndexToOwner: () => { return client.encode("1AC1B04A", []); },
        name: () => { return client.encode("06FDDE03", []); },
        newContractAddress: () => { return client.encode("6AF04A57", []); },
        ownerOf: (_tokenId: number) => { return client.encode("6352211E", ["uint256"], _tokenId); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        pregnantMarmots: () => { return client.encode("35F88BA8", []); },
        promoCreatedCount: () => { return client.encode("05E45546", []); },
        saleAuction: () => { return client.encode("E6CBE351", []); },
        secondsPerBlock: () => { return client.encode("7A7D4937", []); },
        setAutoBirthFee: (val: number) => { return client.encode("4B85FD55", ["uint256"], val); },
        setCEO: (_newCEO: string) => { return client.encode("27D7874C", ["address"], _newCEO); },
        setCFO: (_newCFO: string) => { return client.encode("4E0A3379", ["address"], _newCFO); },
        setCOO: (_newCOO: string) => { return client.encode("2BA73C15", ["address"], _newCOO); },
        setGeneScienceAddress: (_address: string) => { return client.encode("24E7A38A", ["address"], _address); },
        setMetadataAddress: (_contractAddress: string) => { return client.encode("E17B25AF", ["address"], _contractAddress); },
        setNewAddress: (_v2Address: string) => { return client.encode("71587988", ["address"], _v2Address); },
        setSaleAuctionAddress: (_address: string) => { return client.encode("6FBDE40D", ["address"], _address); },
        setSecondsPerBlock: (secs: number) => { return client.encode("5663896E", ["uint256"], secs); },
        setSiringAuctionAddress: (_address: string) => { return client.encode("14001F4C", ["address"], _address); },
        sireAllowedToAddress: () => { return client.encode("46116E6F", []); },
        siringAuction: () => { return client.encode("21717EBF", []); },
        supportsInterface: (_interfaceID: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceID); },
        symbol: () => { return client.encode("95D89B41", []); },
        tokenMetadata: (_tokenId: number, _preferredTransport: string) => { return client.encode("0560FF44", ["uint256", "string"], _tokenId, _preferredTransport); },
        tokensOfOwner: (_owner: string) => { return client.encode("8462151C", ["address"], _owner); },
        totalSupply: () => { return client.encode("18160DDD", []); },
        transfer: (_to: string, _tokenId: number) => { return client.encode("A9059CBB", ["address", "uint256"], _to, _tokenId); },
        transferFrom: (_from: string, _to: string, _tokenId: number) => { return client.encode("23B872DD", ["address", "address", "uint256"], _from, _to, _tokenId); },
        unpause: () => { return client.encode("3F4BA83A", []); },
        withdrawAuctionBalances: () => { return client.encode("91876E57", []); },
        withdrawBalance: () => { return client.encode("5FD8C710", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        GEN0_AUCTION_DURATION: (): [number] => { return client.decode(data, ["uint256"]); },
        GEN0_CREATION_LIMIT: (): [number] => { return client.decode(data, ["uint256"]); },
        GEN0_STARTING_PRICE: (): [number] => { return client.decode(data, ["uint256"]); },
        PROMO_CREATION_LIMIT: (): [number] => { return client.decode(data, ["uint256"]); },
        approve: (): void => { return; },
        approveSiring: (): void => { return; },
        autoBirthFee: (): [number] => { return client.decode(data, ["uint256"]); },
        balanceOf: (): {
            count: number;
        } => {
            const [count] = client.decode(data, ["uint256"]);
            return { count: count };
        },
        bidOnSiringAuction: (): void => { return; },
        breedWithAuto: (): void => { return; },
        canBreedWith: (): [boolean] => { return client.decode(data, ["bool"]); },
        ceoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cfoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooldowns: (): [number] => { return client.decode(data, ["uint32"]); },
        createGen0Auction: (): void => { return; },
        createPromoMarmot: (): void => { return; },
        createSaleAuction: (): void => { return; },
        createSiringAuction: (): void => { return; },
        erc721Metadata: (): [string] => { return client.decode(data, ["address"]); },
        gen0CreatedCount: (): [number] => { return client.decode(data, ["uint256"]); },
        geneScience: (): [string] => { return client.decode(data, ["address"]); },
        getMarmot: (): {
            isGestating: boolean;
            isReady: boolean;
            cooldownIndex: number;
            nextActionAt: number;
            siringWithId: number;
            birthTime: number;
            matronId: number;
            sireId: number;
            generation: number;
            genes: number;
        } => {
            const [isGestating, isReady, cooldownIndex, nextActionAt, siringWithId, birthTime, matronId, sireId, generation, genes] = client.decode(data, ["bool", "bool", "uint256", "uint256", "uint256", "uint256", "uint256", "uint256", "uint256", "uint256"]);
            return { isGestating: isGestating, isReady: isReady, cooldownIndex: cooldownIndex, nextActionAt: nextActionAt, siringWithId: siringWithId, birthTime: birthTime, matronId: matronId, sireId: sireId, generation: generation, genes: genes };
        },
        giveBirth: (): [number] => { return client.decode(data, ["uint256"]); },
        isPregnant: (): [boolean] => { return client.decode(data, ["bool"]); },
        isReadyToBreed: (): [boolean] => { return client.decode(data, ["bool"]); },
        marmotIndexToApproved: (): [string] => { return client.decode(data, ["address"]); },
        marmotIndexToOwner: (): [string] => { return client.decode(data, ["address"]); },
        name: (): [string] => { return client.decode(data, ["string"]); },
        newContractAddress: (): [string] => { return client.decode(data, ["address"]); },
        ownerOf: (): {
            owner: string;
        } => {
            const [owner] = client.decode(data, ["address"]);
            return { owner: owner };
        },
        pause: (): void => { return; },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        pregnantMarmots: (): [number] => { return client.decode(data, ["uint256"]); },
        promoCreatedCount: (): [number] => { return client.decode(data, ["uint256"]); },
        saleAuction: (): [string] => { return client.decode(data, ["address"]); },
        secondsPerBlock: (): [number] => { return client.decode(data, ["uint256"]); },
        setAutoBirthFee: (): void => { return; },
        setCEO: (): void => { return; },
        setCFO: (): void => { return; },
        setCOO: (): void => { return; },
        setGeneScienceAddress: (): void => { return; },
        setMetadataAddress: (): void => { return; },
        setNewAddress: (): void => { return; },
        setSaleAuctionAddress: (): void => { return; },
        setSecondsPerBlock: (): void => { return; },
        setSiringAuctionAddress: (): void => { return; },
        sireAllowedToAddress: (): [string] => { return client.decode(data, ["address"]); },
        siringAuction: (): [string] => { return client.decode(data, ["address"]); },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        symbol: (): [string] => { return client.decode(data, ["string"]); },
        tokenMetadata: (): {
            infoUrl: string;
        } => {
            const [infoUrl] = client.decode(data, ["string"]);
            return { infoUrl: infoUrl };
        },
        tokensOfOwner: (): {
            ownerTokens: number[];
        } => {
            const [ownerTokens] = client.decode(data, ["uint256[]"]);
            return { ownerTokens: ownerTokens };
        },
        totalSupply: (): [number] => { return client.decode(data, ["uint256"]); },
        transfer: (): void => { return; },
        transferFrom: (): void => { return; },
        unpause: (): void => { return; },
        withdrawAuctionBalances: (): void => { return; },
        withdrawBalance: (): void => { return; }
    }; };
}
export module MarmotMinting {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "";
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        Approval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Approval", this.address, callback); }
        Birth(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Birth", this.address, callback); }
        ContractUpgrade(callback: (err: Error, event: any) => void): Readable { return this.client.listen("ContractUpgrade", this.address, callback); }
        Pregnant(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Pregnant", this.address, callback); }
        Transfer(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Transfer", this.address, callback); }
        GEN0_AUCTION_DURATION() {
            const data = Encode(this.client).GEN0_AUCTION_DURATION();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).GEN0_AUCTION_DURATION();
            });
        }
        GEN0_CREATION_LIMIT() {
            const data = Encode(this.client).GEN0_CREATION_LIMIT();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).GEN0_CREATION_LIMIT();
            });
        }
        GEN0_STARTING_PRICE() {
            const data = Encode(this.client).GEN0_STARTING_PRICE();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).GEN0_STARTING_PRICE();
            });
        }
        PROMO_CREATION_LIMIT() {
            const data = Encode(this.client).PROMO_CREATION_LIMIT();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).PROMO_CREATION_LIMIT();
            });
        }
        approve(_to: string, _tokenId: number) {
            const data = Encode(this.client).approve(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approve();
            });
        }
        approveSiring(_addr: string, _sireId: number) {
            const data = Encode(this.client).approveSiring(_addr, _sireId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approveSiring();
            });
        }
        autoBirthFee() {
            const data = Encode(this.client).autoBirthFee();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).autoBirthFee();
            });
        }
        balanceOf(_owner: string) {
            const data = Encode(this.client).balanceOf(_owner);
            return Call<Tx, {
                count: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).balanceOf();
            });
        }
        bidOnSiringAuction(_sireId: number, _matronId: number) {
            const data = Encode(this.client).bidOnSiringAuction(_sireId, _matronId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).bidOnSiringAuction();
            });
        }
        breedWithAuto(_matronId: number, _sireId: number) {
            const data = Encode(this.client).breedWithAuto(_matronId, _sireId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).breedWithAuto();
            });
        }
        canBreedWith(_matronId: number, _sireId: number) {
            const data = Encode(this.client).canBreedWith(_matronId, _sireId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).canBreedWith();
            });
        }
        ceoAddress() {
            const data = Encode(this.client).ceoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ceoAddress();
            });
        }
        cfoAddress() {
            const data = Encode(this.client).cfoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cfoAddress();
            });
        }
        cooAddress() {
            const data = Encode(this.client).cooAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooAddress();
            });
        }
        cooldowns() {
            const data = Encode(this.client).cooldowns();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooldowns();
            });
        }
        createGen0Auction(_genes: number) {
            const data = Encode(this.client).createGen0Auction(_genes);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createGen0Auction();
            });
        }
        createPromoMarmot(_genes: number, _owner: string) {
            const data = Encode(this.client).createPromoMarmot(_genes, _owner);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createPromoMarmot();
            });
        }
        createSaleAuction(_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) {
            const data = Encode(this.client).createSaleAuction(_marmotId, _startingPrice, _endingPrice, _duration);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createSaleAuction();
            });
        }
        createSiringAuction(_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) {
            const data = Encode(this.client).createSiringAuction(_marmotId, _startingPrice, _endingPrice, _duration);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createSiringAuction();
            });
        }
        erc721Metadata() {
            const data = Encode(this.client).erc721Metadata();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).erc721Metadata();
            });
        }
        gen0CreatedCount() {
            const data = Encode(this.client).gen0CreatedCount();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).gen0CreatedCount();
            });
        }
        geneScience() {
            const data = Encode(this.client).geneScience();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).geneScience();
            });
        }
        giveBirth(_matronId: number) {
            const data = Encode(this.client).giveBirth(_matronId);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).giveBirth();
            });
        }
        isPregnant(_marmotId: number) {
            const data = Encode(this.client).isPregnant(_marmotId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isPregnant();
            });
        }
        isReadyToBreed(_marmotId: number) {
            const data = Encode(this.client).isReadyToBreed(_marmotId);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isReadyToBreed();
            });
        }
        marmotIndexToApproved() {
            const data = Encode(this.client).marmotIndexToApproved();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToApproved();
            });
        }
        marmotIndexToOwner() {
            const data = Encode(this.client).marmotIndexToOwner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToOwner();
            });
        }
        name() {
            const data = Encode(this.client).name();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).name();
            });
        }
        ownerOf(_tokenId: number) {
            const data = Encode(this.client).ownerOf(_tokenId);
            return Call<Tx, {
                owner: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerOf();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        pregnantMarmots() {
            const data = Encode(this.client).pregnantMarmots();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pregnantMarmots();
            });
        }
        promoCreatedCount() {
            const data = Encode(this.client).promoCreatedCount();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).promoCreatedCount();
            });
        }
        saleAuction() {
            const data = Encode(this.client).saleAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).saleAuction();
            });
        }
        secondsPerBlock() {
            const data = Encode(this.client).secondsPerBlock();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).secondsPerBlock();
            });
        }
        setAutoBirthFee(val: number) {
            const data = Encode(this.client).setAutoBirthFee(val);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setAutoBirthFee();
            });
        }
        setCEO(_newCEO: string) {
            const data = Encode(this.client).setCEO(_newCEO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCEO();
            });
        }
        setCFO(_newCFO: string) {
            const data = Encode(this.client).setCFO(_newCFO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCFO();
            });
        }
        setCOO(_newCOO: string) {
            const data = Encode(this.client).setCOO(_newCOO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCOO();
            });
        }
        setGeneScienceAddress(_address: string) {
            const data = Encode(this.client).setGeneScienceAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setGeneScienceAddress();
            });
        }
        setMetadataAddress(_contractAddress: string) {
            const data = Encode(this.client).setMetadataAddress(_contractAddress);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setMetadataAddress();
            });
        }
        setSaleAuctionAddress(_address: string) {
            const data = Encode(this.client).setSaleAuctionAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSaleAuctionAddress();
            });
        }
        setSecondsPerBlock(secs: number) {
            const data = Encode(this.client).setSecondsPerBlock(secs);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSecondsPerBlock();
            });
        }
        setSiringAuctionAddress(_address: string) {
            const data = Encode(this.client).setSiringAuctionAddress(_address);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSiringAuctionAddress();
            });
        }
        sireAllowedToAddress() {
            const data = Encode(this.client).sireAllowedToAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).sireAllowedToAddress();
            });
        }
        siringAuction() {
            const data = Encode(this.client).siringAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).siringAuction();
            });
        }
        supportsInterface(_interfaceID: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceID);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
        symbol() {
            const data = Encode(this.client).symbol();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).symbol();
            });
        }
        tokenMetadata(_tokenId: number, _preferredTransport: string) {
            const data = Encode(this.client).tokenMetadata(_tokenId, _preferredTransport);
            return Call<Tx, {
                infoUrl: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokenMetadata();
            });
        }
        tokensOfOwner(_owner: string) {
            const data = Encode(this.client).tokensOfOwner(_owner);
            return Call<Tx, {
                ownerTokens: number[];
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokensOfOwner();
            });
        }
        totalSupply() {
            const data = Encode(this.client).totalSupply();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).totalSupply();
            });
        }
        transfer(_to: string, _tokenId: number) {
            const data = Encode(this.client).transfer(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transfer();
            });
        }
        transferFrom(_from: string, _to: string, _tokenId: number) {
            const data = Encode(this.client).transferFrom(_from, _to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferFrom();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
        withdrawAuctionBalances() {
            const data = Encode(this.client).withdrawAuctionBalances();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).withdrawAuctionBalances();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        GEN0_AUCTION_DURATION: () => { return client.encode("19C2F201", []); },
        GEN0_CREATION_LIMIT: () => { return client.encode("680EBA27", []); },
        GEN0_STARTING_PRICE: () => { return client.encode("0E583DF0", []); },
        PROMO_CREATION_LIMIT: () => { return client.encode("DEFB9584", []); },
        approve: (_to: string, _tokenId: number) => { return client.encode("095EA7B3", ["address", "uint256"], _to, _tokenId); },
        approveSiring: (_addr: string, _sireId: number) => { return client.encode("4DFFF04F", ["address", "uint256"], _addr, _sireId); },
        autoBirthFee: () => { return client.encode("B0C35C05", []); },
        balanceOf: (_owner: string) => { return client.encode("70A08231", ["address"], _owner); },
        bidOnSiringAuction: (_sireId: number, _matronId: number) => { return client.encode("ED60ADE6", ["uint256", "uint256"], _sireId, _matronId); },
        breedWithAuto: (_matronId: number, _sireId: number) => { return client.encode("F7D8C883", ["uint256", "uint256"], _matronId, _sireId); },
        canBreedWith: (_matronId: number, _sireId: number) => { return client.encode("46D22C70", ["uint256", "uint256"], _matronId, _sireId); },
        ceoAddress: () => { return client.encode("0A0F8168", []); },
        cfoAddress: () => { return client.encode("0519CE79", []); },
        cooAddress: () => { return client.encode("B047FB50", []); },
        cooldowns: () => { return client.encode("9D6FAC6F", []); },
        createGen0Auction: (_genes: number) => { return client.encode("C3BEA9AF", ["uint256"], _genes); },
        createPromoMarmot: (_genes: number, _owner: string) => { return client.encode("5CC44AD2", ["uint256", "address"], _genes, _owner); },
        createSaleAuction: (_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) => { return client.encode("3D7D3F5A", ["uint256", "uint256", "uint256", "uint256"], _marmotId, _startingPrice, _endingPrice, _duration); },
        createSiringAuction: (_marmotId: number, _startingPrice: number, _endingPrice: number, _duration: number) => { return client.encode("4AD8C938", ["uint256", "uint256", "uint256", "uint256"], _marmotId, _startingPrice, _endingPrice, _duration); },
        erc721Metadata: () => { return client.encode("BC4006F5", []); },
        gen0CreatedCount: () => { return client.encode("F1CA9410", []); },
        geneScience: () => { return client.encode("F2B47D52", []); },
        giveBirth: (_matronId: number) => { return client.encode("88C2A0BF", ["uint256"], _matronId); },
        isPregnant: (_marmotId: number) => { return client.encode("1940A936", ["uint256"], _marmotId); },
        isReadyToBreed: (_marmotId: number) => { return client.encode("D3E6F49F", ["uint256"], _marmotId); },
        marmotIndexToApproved: () => { return client.encode("EBC6D2BD", []); },
        marmotIndexToOwner: () => { return client.encode("1AC1B04A", []); },
        name: () => { return client.encode("06FDDE03", []); },
        ownerOf: (_tokenId: number) => { return client.encode("6352211E", ["uint256"], _tokenId); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        pregnantMarmots: () => { return client.encode("35F88BA8", []); },
        promoCreatedCount: () => { return client.encode("05E45546", []); },
        saleAuction: () => { return client.encode("E6CBE351", []); },
        secondsPerBlock: () => { return client.encode("7A7D4937", []); },
        setAutoBirthFee: (val: number) => { return client.encode("4B85FD55", ["uint256"], val); },
        setCEO: (_newCEO: string) => { return client.encode("27D7874C", ["address"], _newCEO); },
        setCFO: (_newCFO: string) => { return client.encode("4E0A3379", ["address"], _newCFO); },
        setCOO: (_newCOO: string) => { return client.encode("2BA73C15", ["address"], _newCOO); },
        setGeneScienceAddress: (_address: string) => { return client.encode("24E7A38A", ["address"], _address); },
        setMetadataAddress: (_contractAddress: string) => { return client.encode("E17B25AF", ["address"], _contractAddress); },
        setSaleAuctionAddress: (_address: string) => { return client.encode("6FBDE40D", ["address"], _address); },
        setSecondsPerBlock: (secs: number) => { return client.encode("5663896E", ["uint256"], secs); },
        setSiringAuctionAddress: (_address: string) => { return client.encode("14001F4C", ["address"], _address); },
        sireAllowedToAddress: () => { return client.encode("46116E6F", []); },
        siringAuction: () => { return client.encode("21717EBF", []); },
        supportsInterface: (_interfaceID: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceID); },
        symbol: () => { return client.encode("95D89B41", []); },
        tokenMetadata: (_tokenId: number, _preferredTransport: string) => { return client.encode("0560FF44", ["uint256", "string"], _tokenId, _preferredTransport); },
        tokensOfOwner: (_owner: string) => { return client.encode("8462151C", ["address"], _owner); },
        totalSupply: () => { return client.encode("18160DDD", []); },
        transfer: (_to: string, _tokenId: number) => { return client.encode("A9059CBB", ["address", "uint256"], _to, _tokenId); },
        transferFrom: (_from: string, _to: string, _tokenId: number) => { return client.encode("23B872DD", ["address", "address", "uint256"], _from, _to, _tokenId); },
        unpause: () => { return client.encode("3F4BA83A", []); },
        withdrawAuctionBalances: () => { return client.encode("91876E57", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        GEN0_AUCTION_DURATION: (): [number] => { return client.decode(data, ["uint256"]); },
        GEN0_CREATION_LIMIT: (): [number] => { return client.decode(data, ["uint256"]); },
        GEN0_STARTING_PRICE: (): [number] => { return client.decode(data, ["uint256"]); },
        PROMO_CREATION_LIMIT: (): [number] => { return client.decode(data, ["uint256"]); },
        approve: (): void => { return; },
        approveSiring: (): void => { return; },
        autoBirthFee: (): [number] => { return client.decode(data, ["uint256"]); },
        balanceOf: (): {
            count: number;
        } => {
            const [count] = client.decode(data, ["uint256"]);
            return { count: count };
        },
        bidOnSiringAuction: (): void => { return; },
        breedWithAuto: (): void => { return; },
        canBreedWith: (): [boolean] => { return client.decode(data, ["bool"]); },
        ceoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cfoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooldowns: (): [number] => { return client.decode(data, ["uint32"]); },
        createGen0Auction: (): void => { return; },
        createPromoMarmot: (): void => { return; },
        createSaleAuction: (): void => { return; },
        createSiringAuction: (): void => { return; },
        erc721Metadata: (): [string] => { return client.decode(data, ["address"]); },
        gen0CreatedCount: (): [number] => { return client.decode(data, ["uint256"]); },
        geneScience: (): [string] => { return client.decode(data, ["address"]); },
        giveBirth: (): [number] => { return client.decode(data, ["uint256"]); },
        isPregnant: (): [boolean] => { return client.decode(data, ["bool"]); },
        isReadyToBreed: (): [boolean] => { return client.decode(data, ["bool"]); },
        marmotIndexToApproved: (): [string] => { return client.decode(data, ["address"]); },
        marmotIndexToOwner: (): [string] => { return client.decode(data, ["address"]); },
        name: (): [string] => { return client.decode(data, ["string"]); },
        ownerOf: (): {
            owner: string;
        } => {
            const [owner] = client.decode(data, ["address"]);
            return { owner: owner };
        },
        pause: (): void => { return; },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        pregnantMarmots: (): [number] => { return client.decode(data, ["uint256"]); },
        promoCreatedCount: (): [number] => { return client.decode(data, ["uint256"]); },
        saleAuction: (): [string] => { return client.decode(data, ["address"]); },
        secondsPerBlock: (): [number] => { return client.decode(data, ["uint256"]); },
        setAutoBirthFee: (): void => { return; },
        setCEO: (): void => { return; },
        setCFO: (): void => { return; },
        setCOO: (): void => { return; },
        setGeneScienceAddress: (): void => { return; },
        setMetadataAddress: (): void => { return; },
        setSaleAuctionAddress: (): void => { return; },
        setSecondsPerBlock: (): void => { return; },
        setSiringAuctionAddress: (): void => { return; },
        sireAllowedToAddress: (): [string] => { return client.decode(data, ["address"]); },
        siringAuction: (): [string] => { return client.decode(data, ["address"]); },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        symbol: (): [string] => { return client.decode(data, ["string"]); },
        tokenMetadata: (): {
            infoUrl: string;
        } => {
            const [infoUrl] = client.decode(data, ["string"]);
            return { infoUrl: infoUrl };
        },
        tokensOfOwner: (): {
            ownerTokens: number[];
        } => {
            const [ownerTokens] = client.decode(data, ["uint256[]"]);
            return { ownerTokens: ownerTokens };
        },
        totalSupply: (): [number] => { return client.decode(data, ["uint256"]); },
        transfer: (): void => { return; },
        transferFrom: (): void => { return; },
        unpause: (): void => { return; },
        withdrawAuctionBalances: (): void => { return; }
    }; };
}
export module MarmotOwnership {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "";
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        Approval(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Approval", this.address, callback); }
        Birth(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Birth", this.address, callback); }
        ContractUpgrade(callback: (err: Error, event: any) => void): Readable { return this.client.listen("ContractUpgrade", this.address, callback); }
        Transfer(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Transfer", this.address, callback); }
        approve(_to: string, _tokenId: number) {
            const data = Encode(this.client).approve(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).approve();
            });
        }
        balanceOf(_owner: string) {
            const data = Encode(this.client).balanceOf(_owner);
            return Call<Tx, {
                count: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).balanceOf();
            });
        }
        ceoAddress() {
            const data = Encode(this.client).ceoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ceoAddress();
            });
        }
        cfoAddress() {
            const data = Encode(this.client).cfoAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cfoAddress();
            });
        }
        cooAddress() {
            const data = Encode(this.client).cooAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooAddress();
            });
        }
        cooldowns() {
            const data = Encode(this.client).cooldowns();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cooldowns();
            });
        }
        erc721Metadata() {
            const data = Encode(this.client).erc721Metadata();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).erc721Metadata();
            });
        }
        marmotIndexToApproved() {
            const data = Encode(this.client).marmotIndexToApproved();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToApproved();
            });
        }
        marmotIndexToOwner() {
            const data = Encode(this.client).marmotIndexToOwner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).marmotIndexToOwner();
            });
        }
        name() {
            const data = Encode(this.client).name();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).name();
            });
        }
        ownerOf(_tokenId: number) {
            const data = Encode(this.client).ownerOf(_tokenId);
            return Call<Tx, {
                owner: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerOf();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        saleAuction() {
            const data = Encode(this.client).saleAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).saleAuction();
            });
        }
        secondsPerBlock() {
            const data = Encode(this.client).secondsPerBlock();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).secondsPerBlock();
            });
        }
        setCEO(_newCEO: string) {
            const data = Encode(this.client).setCEO(_newCEO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCEO();
            });
        }
        setCFO(_newCFO: string) {
            const data = Encode(this.client).setCFO(_newCFO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCFO();
            });
        }
        setCOO(_newCOO: string) {
            const data = Encode(this.client).setCOO(_newCOO);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setCOO();
            });
        }
        setMetadataAddress(_contractAddress: string) {
            const data = Encode(this.client).setMetadataAddress(_contractAddress);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setMetadataAddress();
            });
        }
        setSecondsPerBlock(secs: number) {
            const data = Encode(this.client).setSecondsPerBlock(secs);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).setSecondsPerBlock();
            });
        }
        sireAllowedToAddress() {
            const data = Encode(this.client).sireAllowedToAddress();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).sireAllowedToAddress();
            });
        }
        siringAuction() {
            const data = Encode(this.client).siringAuction();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).siringAuction();
            });
        }
        supportsInterface(_interfaceID: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceID);
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
        symbol() {
            const data = Encode(this.client).symbol();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).symbol();
            });
        }
        tokenMetadata(_tokenId: number, _preferredTransport: string) {
            const data = Encode(this.client).tokenMetadata(_tokenId, _preferredTransport);
            return Call<Tx, {
                infoUrl: string;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokenMetadata();
            });
        }
        tokensOfOwner(_owner: string) {
            const data = Encode(this.client).tokensOfOwner(_owner);
            return Call<Tx, {
                ownerTokens: number[];
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).tokensOfOwner();
            });
        }
        totalSupply() {
            const data = Encode(this.client).totalSupply();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).totalSupply();
            });
        }
        transfer(_to: string, _tokenId: number) {
            const data = Encode(this.client).transfer(_to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transfer();
            });
        }
        transferFrom(_from: string, _to: string, _tokenId: number) {
            const data = Encode(this.client).transferFrom(_from, _to, _tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferFrom();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        approve: (_to: string, _tokenId: number) => { return client.encode("095EA7B3", ["address", "uint256"], _to, _tokenId); },
        balanceOf: (_owner: string) => { return client.encode("70A08231", ["address"], _owner); },
        ceoAddress: () => { return client.encode("0A0F8168", []); },
        cfoAddress: () => { return client.encode("0519CE79", []); },
        cooAddress: () => { return client.encode("B047FB50", []); },
        cooldowns: () => { return client.encode("9D6FAC6F", []); },
        erc721Metadata: () => { return client.encode("BC4006F5", []); },
        marmotIndexToApproved: () => { return client.encode("EBC6D2BD", []); },
        marmotIndexToOwner: () => { return client.encode("1AC1B04A", []); },
        name: () => { return client.encode("06FDDE03", []); },
        ownerOf: (_tokenId: number) => { return client.encode("6352211E", ["uint256"], _tokenId); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        saleAuction: () => { return client.encode("E6CBE351", []); },
        secondsPerBlock: () => { return client.encode("7A7D4937", []); },
        setCEO: (_newCEO: string) => { return client.encode("27D7874C", ["address"], _newCEO); },
        setCFO: (_newCFO: string) => { return client.encode("4E0A3379", ["address"], _newCFO); },
        setCOO: (_newCOO: string) => { return client.encode("2BA73C15", ["address"], _newCOO); },
        setMetadataAddress: (_contractAddress: string) => { return client.encode("E17B25AF", ["address"], _contractAddress); },
        setSecondsPerBlock: (secs: number) => { return client.encode("5663896E", ["uint256"], secs); },
        sireAllowedToAddress: () => { return client.encode("46116E6F", []); },
        siringAuction: () => { return client.encode("21717EBF", []); },
        supportsInterface: (_interfaceID: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceID); },
        symbol: () => { return client.encode("95D89B41", []); },
        tokenMetadata: (_tokenId: number, _preferredTransport: string) => { return client.encode("0560FF44", ["uint256", "string"], _tokenId, _preferredTransport); },
        tokensOfOwner: (_owner: string) => { return client.encode("8462151C", ["address"], _owner); },
        totalSupply: () => { return client.encode("18160DDD", []); },
        transfer: (_to: string, _tokenId: number) => { return client.encode("A9059CBB", ["address", "uint256"], _to, _tokenId); },
        transferFrom: (_from: string, _to: string, _tokenId: number) => { return client.encode("23B872DD", ["address", "address", "uint256"], _from, _to, _tokenId); },
        unpause: () => { return client.encode("3F4BA83A", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        approve: (): void => { return; },
        balanceOf: (): {
            count: number;
        } => {
            const [count] = client.decode(data, ["uint256"]);
            return { count: count };
        },
        ceoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cfoAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooAddress: (): [string] => { return client.decode(data, ["address"]); },
        cooldowns: (): [number] => { return client.decode(data, ["uint32"]); },
        erc721Metadata: (): [string] => { return client.decode(data, ["address"]); },
        marmotIndexToApproved: (): [string] => { return client.decode(data, ["address"]); },
        marmotIndexToOwner: (): [string] => { return client.decode(data, ["address"]); },
        name: (): [string] => { return client.decode(data, ["string"]); },
        ownerOf: (): {
            owner: string;
        } => {
            const [owner] = client.decode(data, ["address"]);
            return { owner: owner };
        },
        pause: (): void => { return; },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        saleAuction: (): [string] => { return client.decode(data, ["address"]); },
        secondsPerBlock: (): [number] => { return client.decode(data, ["uint256"]); },
        setCEO: (): void => { return; },
        setCFO: (): void => { return; },
        setCOO: (): void => { return; },
        setMetadataAddress: (): void => { return; },
        setSecondsPerBlock: (): void => { return; },
        sireAllowedToAddress: (): [string] => { return client.decode(data, ["address"]); },
        siringAuction: (): [string] => { return client.decode(data, ["address"]); },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        symbol: (): [string] => { return client.decode(data, ["string"]); },
        tokenMetadata: (): {
            infoUrl: string;
        } => {
            const [infoUrl] = client.decode(data, ["string"]);
            return { infoUrl: infoUrl };
        },
        tokensOfOwner: (): {
            ownerTokens: number[];
        } => {
            const [ownerTokens] = client.decode(data, ["uint256[]"]);
            return { ownerTokens: ownerTokens };
        },
        totalSupply: (): [number] => { return client.decode(data, ["uint256"]); },
        transfer: (): void => { return; },
        transferFrom: (): void => { return; },
        unpause: (): void => { return; }
    }; };
}
export module Ownable {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101f4806100606000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638da5cb5b1461003b578063f2fde38b14610085575b600080fd5b6100436100c9565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100c76004803603602081101561009b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100ee565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146101bc57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5056fea265627a7a72315820df1ae45e01992a18572eec001e9d99bae340d2fa8112b5473b338f7289b4785e64736f6c634300050c0032";
        const data = bytecode + client.encode("", []);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        owner() {
            const data = Encode(this.client).owner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).owner();
            });
        }
        transferOwnership(newOwner: string) {
            const data = Encode(this.client).transferOwnership(newOwner);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferOwnership();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        owner: () => { return client.encode("8DA5CB5B", []); },
        transferOwnership: (newOwner: string) => { return client.encode("F2FDE38B", ["address"], newOwner); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        owner: (): [string] => { return client.decode(data, ["address"]); },
        transferOwnership: (): void => { return; }
    }; };
}
export module Pausable {
    export function Deploy<Tx>(client: Provider<Tx>): Promise<string> {
        let bytecode = "608060405260008060146101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104128061006d6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633f4ba83a1461005c5780635c975abb1461007e5780638456cb59146100a05780638da5cb5b146100c2578063f2fde38b1461010c575b600080fd5b610064610150565b604051808215151515815260200191505060405180910390f35b610086610211565b604051808215151515815260200191505060405180910390f35b6100a8610224565b604051808215151515815260200191505060405180910390f35b6100ca6102e7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61014e6004803603602081101561012257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061030c565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ab57600080fd5b600060149054906101000a900460ff166101c457600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a16001905090565b600060149054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461027f57600080fd5b600060149054906101000a900460ff161561029957600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a16001905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461036557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103da57806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5056fea265627a7a72315820673c7af77c5cea89edfa1b94c1b7d4d39e3fa37dcd2ad30a41180050b34cb23564736f6c634300050c0032";
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        Pause(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Pause", this.address, callback); }
        Unpause(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Unpause", this.address, callback); }
        owner() {
            const data = Encode(this.client).owner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).owner();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        transferOwnership(newOwner: string) {
            const data = Encode(this.client).transferOwnership(newOwner);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferOwnership();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        owner: () => { return client.encode("8DA5CB5B", []); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        transferOwnership: (newOwner: string) => { return client.encode("F2FDE38B", ["address"], newOwner); },
        unpause: () => { return client.encode("3F4BA83A", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        owner: (): [string] => { return client.decode(data, ["address"]); },
        pause: (): [boolean] => { return client.decode(data, ["bool"]); },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        transferOwnership: (): void => { return; },
        unpause: (): [boolean] => { return client.decode(data, ["bool"]); }
    }; };
}
export module SaleClockAuction {
    export function Deploy<Tx>(client: Provider<Tx>, _nftAddr: string, _cut: number): Promise<string> {
        let bytecode = "608060405260008060146101000a81548160ff0219169083151502179055506001600460006101000a81548160ff02191690831515021790555034801561004557600080fd5b506040516119763803806119768339818101604052604081101561006857600080fd5b8101908080519060200190929190805190602001909291905050508181336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506127108111156100d457600080fd5b8060028190555060008290508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a7639a20483d60e01b6040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b15801561017657600080fd5b505afa15801561018a573d6000803e3d6000fd5b505050506040513d60208110156101a057600080fd5b81019080805190602001909291905050506101ba57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506117678061020f6000396000f3fe6080604052600436106101095760003560e01c806385b861881161009557806396b5a7551161006457806396b5a75514610456578063c55d0f5614610491578063dd1b7a0f146104e0578063eac9d94c14610537578063f2fde38b1461056257610109565b806385b861881461036a578063878eb368146103995780638a98a9cc146103d45780638da5cb5b146103ff57610109565b80635c975abb116100dc5780635c975abb146102335780635fd8c7101461026257806378bd79351461027957806383b5ff8b146103105780638456cb591461033b57610109565b806327ebe40a1461010e5780633f4ba83a14610187578063454a2ab3146101b6578063484eccb4146101e4575b600080fd5b34801561011a57600080fd5b50610185600480360360a081101561013157600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105b3565b005b34801561019357600080fd5b5061019c6106fa565b604051808215151515815260200191505060405180910390f35b6101e2600480360360208110156101cc57600080fd5b81019080803590602001909291905050506107bb565b005b3480156101f057600080fd5b5061021d6004803603602081101561020757600080fd5b810190808035906020019092919050505061089a565b6040518082815260200191505060405180910390f35b34801561023f57600080fd5b506102486108b2565b604051808215151515815260200191505060405180910390f35b34801561026e57600080fd5b506102776108c5565b005b34801561028557600080fd5b506102b26004803603602081101561029c57600080fd5b81019080803590602001909291905050506109dc565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b34801561031c57600080fd5b50610325610b00565b6040518082815260200191505060405180910390f35b34801561034757600080fd5b50610350610b06565b604051808215151515815260200191505060405180910390f35b34801561037657600080fd5b5061037f610bc9565b604051808215151515815260200191505060405180910390f35b3480156103a557600080fd5b506103d2600480360360208110156103bc57600080fd5b8101908080359060200190929190505050610bdc565b005b3480156103e057600080fd5b506103e9610ca9565b6040518082815260200191505060405180910390f35b34801561040b57600080fd5b50610414610caf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561046257600080fd5b5061048f6004803603602081101561047957600080fd5b8101908080359060200190929190505050610cd4565b005b34801561049d57600080fd5b506104ca600480360360208110156104b457600080fd5b8101908080359060200190929190505050610d6d565b6040518082815260200191505060405180910390f35b3480156104ec57600080fd5b506104f5610da8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561054357600080fd5b5061054c610dce565b6040518082815260200191505060405180910390f35b34801561056e57600080fd5b506105b16004803603602081101561058557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e16565b005b836fffffffffffffffffffffffffffffffff1684146105d157600080fd5b826fffffffffffffffffffffffffffffffff1683146105ef57600080fd5b8167ffffffffffffffff16821461060557600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461065f57600080fd5b6106698186610ee7565b6106716116b5565b6040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681526020014267ffffffffffffffff1681525090506106f28682610fe0565b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461075557600080fd5b600060149054906101000a900460ff1661076e57600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a16001905090565b60006003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600061080283346111c3565b905061080e338461136e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561089557806006600580548161087257fe5b066005811061087d57fe5b01819055506005600081548092919060010191905055505b505050565b600681600581106108a757fe5b016000915090505481565b600060149054906101000a900460ff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061097257508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61097b57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156109d8573d6000803e3d6000fd5b5050565b600080600080600080600360008881526020019081526020016000209050610a0381611433565b610a0c57600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a90046fffffffffffffffffffffffffffffffff168260010160109054906101000a90046fffffffffffffffffffffffffffffffff168360020160009054906101000a900467ffffffffffffffff168460020160089054906101000a900467ffffffffffffffff16849450836fffffffffffffffffffffffffffffffff169350826fffffffffffffffffffffffffffffffff1692508167ffffffffffffffff1691508067ffffffffffffffff169050955095509550955095505091939590929450565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b6157600080fd5b600060149054906101000a900460ff1615610b7b57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a16001905090565b600460009054906101000a900460ff1681565b600060149054906101000a900460ff16610bf557600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c4e57600080fd5b6000600360008381526020019081526020016000209050610c6e81611433565b610c7757600080fd5b610ca5828260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611461565b5050565b60055481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008381526020019081526020016000209050610cf481611433565b610cfd57600080fd5b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d5e57600080fd5b610d688382611461565b505050565b600080600360008481526020019081526020016000209050610d8e81611433565b610d9757600080fd5b610da0816114af565b915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000905060008090505b6005811015610e045760068160058110610df157fe5b0154820191508080600101915050610ddb565b5060058181610e0f57fe5b0491505090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e6f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ee457806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610fc457600080fd5b505af1158015610fd8573d6000803e3d6000fd5b505050505050565b603c816060015167ffffffffffffffff161015610ffc57600080fd5b806003600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050507fa9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba78282602001516fffffffffffffffffffffffffffffffff1683604001516fffffffffffffffffffffffffffffffff16846060015167ffffffffffffffff166040518085815260200184815260200183815260200182815260200194505050505060405180910390a15050565b6000806003600085815260200190815260200160002090506111e481611433565b6111ed57600080fd5b60006111f8826114af565b90508084101561120757600080fd5b60008260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611239866115a2565b60008211156112a057600061124d8361165e565b9050600081840390508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561129c573d6000803e3d6000fd5b5050505b600082860390503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156112ed573d6000803e3d6000fd5b507f4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd2878433604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a18294505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561141757600080fd5b505af115801561142b573d6000803e3d6000fd5b505050505050565b6000808260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16119050919050565b61146a826115a2565b611474818361136e565b7f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df826040518082815260200191505060405180910390a15050565b600080600090508260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16421115611508578260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16420390505b61159a8360010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168560020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1684611677565b915050919050565b60036000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff0219169055505050565b600061271060025483028161166f57fe5b049050919050565b6000828210611688578390506116ad565b600085850390506000848483028161169c57fe5b059050600081880190508093505050505b949350505050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152509056fea265627a7a72315820e43b06ba353e63b34bc5065eec9c158acd4ba03efa5f55ba4e335b723de5bf7d64736f6c634300050c0032";
        const data = bytecode + client.encode("", ["address", "uint256"], _nftAddr, _cut);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        AuctionCancelled(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionCancelled", this.address, callback); }
        AuctionCreated(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionCreated", this.address, callback); }
        AuctionSuccessful(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionSuccessful", this.address, callback); }
        Pause(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Pause", this.address, callback); }
        Unpause(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Unpause", this.address, callback); }
        averageGen0SalePrice() {
            const data = Encode(this.client).averageGen0SalePrice();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).averageGen0SalePrice();
            });
        }
        bid(_tokenId: number) {
            const data = Encode(this.client).bid(_tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).bid();
            });
        }
        cancelAuction(_tokenId: number) {
            const data = Encode(this.client).cancelAuction(_tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cancelAuction();
            });
        }
        cancelAuctionWhenPaused(_tokenId: number) {
            const data = Encode(this.client).cancelAuctionWhenPaused(_tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cancelAuctionWhenPaused();
            });
        }
        createAuction(_tokenId: number, _startingPrice: number, _endingPrice: number, _duration: number, _seller: string) {
            const data = Encode(this.client).createAuction(_tokenId, _startingPrice, _endingPrice, _duration, _seller);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createAuction();
            });
        }
        gen0SaleCount() {
            const data = Encode(this.client).gen0SaleCount();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).gen0SaleCount();
            });
        }
        getAuction(_tokenId: number) {
            const data = Encode(this.client).getAuction(_tokenId);
            return Call<Tx, {
                seller: string;
                startingPrice: number;
                endingPrice: number;
                duration: number;
                startedAt: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).getAuction();
            });
        }
        getCurrentPrice(_tokenId: number) {
            const data = Encode(this.client).getCurrentPrice(_tokenId);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).getCurrentPrice();
            });
        }
        isSaleClockAuction() {
            const data = Encode(this.client).isSaleClockAuction();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isSaleClockAuction();
            });
        }
        lastGen0SalePrices() {
            const data = Encode(this.client).lastGen0SalePrices();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).lastGen0SalePrices();
            });
        }
        nonFungibleContract() {
            const data = Encode(this.client).nonFungibleContract();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).nonFungibleContract();
            });
        }
        owner() {
            const data = Encode(this.client).owner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).owner();
            });
        }
        ownerCut() {
            const data = Encode(this.client).ownerCut();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerCut();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        transferOwnership(newOwner: string) {
            const data = Encode(this.client).transferOwnership(newOwner);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferOwnership();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
        withdrawBalance() {
            const data = Encode(this.client).withdrawBalance();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).withdrawBalance();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        averageGen0SalePrice: () => { return client.encode("EAC9D94C", []); },
        bid: (_tokenId: number) => { return client.encode("454A2AB3", ["uint256"], _tokenId); },
        cancelAuction: (_tokenId: number) => { return client.encode("96B5A755", ["uint256"], _tokenId); },
        cancelAuctionWhenPaused: (_tokenId: number) => { return client.encode("878EB368", ["uint256"], _tokenId); },
        createAuction: (_tokenId: number, _startingPrice: number, _endingPrice: number, _duration: number, _seller: string) => { return client.encode("27EBE40A", ["uint256", "uint256", "uint256", "uint256", "address"], _tokenId, _startingPrice, _endingPrice, _duration, _seller); },
        gen0SaleCount: () => { return client.encode("8A98A9CC", []); },
        getAuction: (_tokenId: number) => { return client.encode("78BD7935", ["uint256"], _tokenId); },
        getCurrentPrice: (_tokenId: number) => { return client.encode("C55D0F56", ["uint256"], _tokenId); },
        isSaleClockAuction: () => { return client.encode("85B86188", []); },
        lastGen0SalePrices: () => { return client.encode("484ECCB4", []); },
        nonFungibleContract: () => { return client.encode("DD1B7A0F", []); },
        owner: () => { return client.encode("8DA5CB5B", []); },
        ownerCut: () => { return client.encode("83B5FF8B", []); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        transferOwnership: (newOwner: string) => { return client.encode("F2FDE38B", ["address"], newOwner); },
        unpause: () => { return client.encode("3F4BA83A", []); },
        withdrawBalance: () => { return client.encode("5FD8C710", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        averageGen0SalePrice: (): [number] => { return client.decode(data, ["uint256"]); },
        bid: (): void => { return; },
        cancelAuction: (): void => { return; },
        cancelAuctionWhenPaused: (): void => { return; },
        createAuction: (): void => { return; },
        gen0SaleCount: (): [number] => { return client.decode(data, ["uint256"]); },
        getAuction: (): {
            seller: string;
            startingPrice: number;
            endingPrice: number;
            duration: number;
            startedAt: number;
        } => {
            const [seller, startingPrice, endingPrice, duration, startedAt] = client.decode(data, ["address", "uint256", "uint256", "uint256", "uint256"]);
            return { seller: seller, startingPrice: startingPrice, endingPrice: endingPrice, duration: duration, startedAt: startedAt };
        },
        getCurrentPrice: (): [number] => { return client.decode(data, ["uint256"]); },
        isSaleClockAuction: (): [boolean] => { return client.decode(data, ["bool"]); },
        lastGen0SalePrices: (): [number] => { return client.decode(data, ["uint256"]); },
        nonFungibleContract: (): [string] => { return client.decode(data, ["address"]); },
        owner: (): [string] => { return client.decode(data, ["address"]); },
        ownerCut: (): [number] => { return client.decode(data, ["uint256"]); },
        pause: (): [boolean] => { return client.decode(data, ["bool"]); },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        transferOwnership: (): void => { return; },
        unpause: (): [boolean] => { return client.decode(data, ["bool"]); },
        withdrawBalance: (): void => { return; }
    }; };
}
export module SiringClockAuction {
    export function Deploy<Tx>(client: Provider<Tx>, _nftAddr: string, _cut: number): Promise<string> {
        let bytecode = "608060405260008060146101000a81548160ff0219169083151502179055506001600460006101000a81548160ff02191690831515021790555034801561004557600080fd5b506040516118193803806118198339818101604052604081101561006857600080fd5b8101908080519060200190929190805190602001909291905050508181336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506127108111156100d457600080fd5b8060028190555060008290508073ffffffffffffffffffffffffffffffffffffffff166301ffc9a7639a20483d60e01b6040518263ffffffff1660e01b815260040180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060206040518083038186803b15801561017657600080fd5b505afa15801561018a573d6000803e3d6000fd5b505050506040513d60208110156101a057600080fd5b81019080805190602001909291905050506101ba57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505061160a8061020f6000396000f3fe6080604052600436106100e85760003560e01c806383b5ff8b1161008a57806396b5a7551161005957806396b5a755146103bb578063c55d0f56146103f6578063dd1b7a0f14610445578063f2fde38b1461049c576100e8565b806383b5ff8b146102cf5780638456cb59146102fa578063878eb368146103295780638da5cb5b14610364576100e8565b80635c975abb116100c65780635c975abb146101c35780635fd8c710146101f257806376190f8f1461020957806378bd793514610238576100e8565b806327ebe40a146100ed5780633f4ba83a14610166578063454a2ab314610195575b600080fd5b3480156100f957600080fd5b50610164600480360360a081101561011057600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506104ed565b005b34801561017257600080fd5b5061017b610634565b604051808215151515815260200191505060405180910390f35b6101c1600480360360208110156101ab57600080fd5b81019080803590602001909291905050506106f5565b005b3480156101cf57600080fd5b506101d86107a3565b604051808215151515815260200191505060405180910390f35b3480156101fe57600080fd5b506102076107b6565b005b34801561021557600080fd5b5061021e6108cd565b604051808215151515815260200191505060405180910390f35b34801561024457600080fd5b506102716004803603602081101561025b57600080fd5b81019080803590602001909291905050506108e0565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b3480156102db57600080fd5b506102e4610a04565b6040518082815260200191505060405180910390f35b34801561030657600080fd5b5061030f610a0a565b604051808215151515815260200191505060405180910390f35b34801561033557600080fd5b506103626004803603602081101561034c57600080fd5b8101908080359060200190929190505050610acd565b005b34801561037057600080fd5b50610379610b9a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103c757600080fd5b506103f4600480360360208110156103de57600080fd5b8101908080359060200190929190505050610bbf565b005b34801561040257600080fd5b5061042f6004803603602081101561041957600080fd5b8101908080359060200190929190505050610c58565b6040518082815260200191505060405180910390f35b34801561045157600080fd5b5061045a610c93565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104a857600080fd5b506104eb600480360360208110156104bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610cb9565b005b836fffffffffffffffffffffffffffffffff16841461050b57600080fd5b826fffffffffffffffffffffffffffffffff16831461052957600080fd5b8167ffffffffffffffff16821461053f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059957600080fd5b6105a38186610d8a565b6105ab611558565b6040518060a001604052808373ffffffffffffffffffffffffffffffffffffffff168152602001866fffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff1681526020018467ffffffffffffffff1681526020014267ffffffffffffffff16815250905061062c8682610e83565b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461068f57600080fd5b600060149054906101000a900460ff166106a857600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a16001905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074f57600080fd5b60006003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506107948234611066565b5061079f8183611211565b5050565b600060149054906101000a900460ff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061086357508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61086c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156108c9573d6000803e3d6000fd5b5050565b600460009054906101000a900460ff1681565b600080600080600080600360008881526020019081526020016000209050610907816112d6565b61091057600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a90046fffffffffffffffffffffffffffffffff168260010160109054906101000a90046fffffffffffffffffffffffffffffffff168360020160009054906101000a900467ffffffffffffffff168460020160089054906101000a900467ffffffffffffffff16849450836fffffffffffffffffffffffffffffffff169350826fffffffffffffffffffffffffffffffff1692508167ffffffffffffffff1691508067ffffffffffffffff169050955095509550955095505091939590929450565b60025481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a6557600080fd5b600060149054906101000a900460ff1615610a7f57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a16001905090565b600060149054906101000a900460ff16610ae657600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3f57600080fd5b6000600360008381526020019081526020016000209050610b5f816112d6565b610b6857600080fd5b610b96828260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16611304565b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008381526020019081526020016000209050610bdf816112d6565b610be857600080fd5b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c4957600080fd5b610c538382611304565b505050565b600080600360008481526020019081526020016000209050610c79816112d6565b610c8257600080fd5b610c8b81611352565b915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d1257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d8757806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b158015610e6757600080fd5b505af1158015610e7b573d6000803e3d6000fd5b505050505050565b603c816060015167ffffffffffffffff161015610e9f57600080fd5b806003600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050507fa9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba78282602001516fffffffffffffffffffffffffffffffff1683604001516fffffffffffffffffffffffffffffffff16846060015167ffffffffffffffff166040518085815260200184815260200183815260200182815260200194505050505060405180910390a15050565b600080600360008581526020019081526020016000209050611087816112d6565b61109057600080fd5b600061109b82611352565b9050808410156110aa57600080fd5b60008260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506110dc86611445565b60008211156111435760006110f083611501565b9050600081840390508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561113f573d6000803e3d6000fd5b5050505b600082860390503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611190573d6000803e3d6000fd5b507f4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd2878433604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a18294505050505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156112ba57600080fd5b505af11580156112ce573d6000803e3d6000fd5b505050505050565b6000808260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16119050919050565b61130d82611445565b6113178183611211565b7f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df826040518082815260200191505060405180910390a15050565b600080600090508260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff164211156113ab578260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16420390505b61143d8360010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168560020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168461151a565b915050919050565b60036000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff0219169055505050565b600061271060025483028161151257fe5b049050919050565b600082821061152b57839050611550565b600085850390506000848483028161153f57fe5b059050600081880190508093505050505b949350505050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152509056fea265627a7a723158207eb72a59ed4dbf2c48e1e42b02eff4b7bf7a2e8d36ce34de627e8c93afe9502c64736f6c634300050c0032";
        const data = bytecode + client.encode("", ["address", "uint256"], _nftAddr, _cut);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => {
            client.deploy(payload, (err, addr) => {
                if (err)
                    reject(err);
                else {
                    const address = Buffer.from(addr).toString("hex").toUpperCase();
                    resolve(address);
                }
            });
        });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        AuctionCancelled(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionCancelled", this.address, callback); }
        AuctionCreated(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionCreated", this.address, callback); }
        AuctionSuccessful(callback: (err: Error, event: any) => void): Readable { return this.client.listen("AuctionSuccessful", this.address, callback); }
        Pause(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Pause", this.address, callback); }
        Unpause(callback: (err: Error, event: any) => void): Readable { return this.client.listen("Unpause", this.address, callback); }
        bid(_tokenId: number) {
            const data = Encode(this.client).bid(_tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).bid();
            });
        }
        cancelAuction(_tokenId: number) {
            const data = Encode(this.client).cancelAuction(_tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cancelAuction();
            });
        }
        cancelAuctionWhenPaused(_tokenId: number) {
            const data = Encode(this.client).cancelAuctionWhenPaused(_tokenId);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).cancelAuctionWhenPaused();
            });
        }
        createAuction(_tokenId: number, _startingPrice: number, _endingPrice: number, _duration: number, _seller: string) {
            const data = Encode(this.client).createAuction(_tokenId, _startingPrice, _endingPrice, _duration, _seller);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).createAuction();
            });
        }
        getAuction(_tokenId: number) {
            const data = Encode(this.client).getAuction(_tokenId);
            return Call<Tx, {
                seller: string;
                startingPrice: number;
                endingPrice: number;
                duration: number;
                startedAt: number;
            }>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).getAuction();
            });
        }
        getCurrentPrice(_tokenId: number) {
            const data = Encode(this.client).getCurrentPrice(_tokenId);
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).getCurrentPrice();
            });
        }
        isSiringClockAuction() {
            const data = Encode(this.client).isSiringClockAuction();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).isSiringClockAuction();
            });
        }
        nonFungibleContract() {
            const data = Encode(this.client).nonFungibleContract();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).nonFungibleContract();
            });
        }
        owner() {
            const data = Encode(this.client).owner();
            return Call<Tx, [string]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).owner();
            });
        }
        ownerCut() {
            const data = Encode(this.client).ownerCut();
            return Call<Tx, [number]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).ownerCut();
            });
        }
        pause() {
            const data = Encode(this.client).pause();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).pause();
            });
        }
        paused() {
            const data = Encode(this.client).paused();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).paused();
            });
        }
        transferOwnership(newOwner: string) {
            const data = Encode(this.client).transferOwnership(newOwner);
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferOwnership();
            });
        }
        unpause() {
            const data = Encode(this.client).unpause();
            return Call<Tx, [boolean]>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).unpause();
            });
        }
        withdrawBalance() {
            const data = Encode(this.client).withdrawBalance();
            return Call<Tx, void>(this.client, this.address, data, (exec: Uint8Array) => {
                return Decode(this.client, exec).withdrawBalance();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        bid: (_tokenId: number) => { return client.encode("454A2AB3", ["uint256"], _tokenId); },
        cancelAuction: (_tokenId: number) => { return client.encode("96B5A755", ["uint256"], _tokenId); },
        cancelAuctionWhenPaused: (_tokenId: number) => { return client.encode("878EB368", ["uint256"], _tokenId); },
        createAuction: (_tokenId: number, _startingPrice: number, _endingPrice: number, _duration: number, _seller: string) => { return client.encode("27EBE40A", ["uint256", "uint256", "uint256", "uint256", "address"], _tokenId, _startingPrice, _endingPrice, _duration, _seller); },
        getAuction: (_tokenId: number) => { return client.encode("78BD7935", ["uint256"], _tokenId); },
        getCurrentPrice: (_tokenId: number) => { return client.encode("C55D0F56", ["uint256"], _tokenId); },
        isSiringClockAuction: () => { return client.encode("76190F8F", []); },
        nonFungibleContract: () => { return client.encode("DD1B7A0F", []); },
        owner: () => { return client.encode("8DA5CB5B", []); },
        ownerCut: () => { return client.encode("83B5FF8B", []); },
        pause: () => { return client.encode("8456CB59", []); },
        paused: () => { return client.encode("5C975ABB", []); },
        transferOwnership: (newOwner: string) => { return client.encode("F2FDE38B", ["address"], newOwner); },
        unpause: () => { return client.encode("3F4BA83A", []); },
        withdrawBalance: () => { return client.encode("5FD8C710", []); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        bid: (): void => { return; },
        cancelAuction: (): void => { return; },
        cancelAuctionWhenPaused: (): void => { return; },
        createAuction: (): void => { return; },
        getAuction: (): {
            seller: string;
            startingPrice: number;
            endingPrice: number;
            duration: number;
            startedAt: number;
        } => {
            const [seller, startingPrice, endingPrice, duration, startedAt] = client.decode(data, ["address", "uint256", "uint256", "uint256", "uint256"]);
            return { seller: seller, startingPrice: startingPrice, endingPrice: endingPrice, duration: duration, startedAt: startedAt };
        },
        getCurrentPrice: (): [number] => { return client.decode(data, ["uint256"]); },
        isSiringClockAuction: (): [boolean] => { return client.decode(data, ["bool"]); },
        nonFungibleContract: (): [string] => { return client.decode(data, ["address"]); },
        owner: (): [string] => { return client.decode(data, ["address"]); },
        ownerCut: (): [number] => { return client.decode(data, ["uint256"]); },
        pause: (): [boolean] => { return client.decode(data, ["bool"]); },
        paused: (): [boolean] => { return client.decode(data, ["bool"]); },
        transferOwnership: (): void => { return; },
        unpause: (): [boolean] => { return client.decode(data, ["bool"]); },
        withdrawBalance: (): void => { return; }
    }; };
}